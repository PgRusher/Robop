using Guna.UI2.WinForms;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Net.Http;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Roboping
{
    public partial class Main : Form
    {
        private PerformanceCounter uploadCounter;

        private PerformanceCounter downloadCounter;

        private float totalMBFromServer;
        private float maxdownloadMBFromServer;
        private float totalDownloadMB = 0; // Accumulated total download
        private float totalUploadMB = 0; // Accumulated total upload

        private System.Windows.Forms.Timer timer2;
        private bool isRunning2 = false;

        private bool count = false;
        private bool isSessionActive = false;
        private bool isSessionActive1 = false;// To control start and stop of the heartbeat
        private System.Windows.Forms.Timer heartbeatTimer;

        // string server = "oh.roboping.ir"; // Update with your server IP
        //  int port = 7317; // Update with your server port
        private Timer timer;

        private TcpClient client;
        private NetworkStream stream;
        public static Main instance;
        private checkforupdate check;
        private ERROR eror;
        private SETTINGS setting;
        private about about;
        private Games games;

        class UserData
        {
            public string username { get; set; }
            public string Action { get; set; }
            public int data { get; set; }

        }

        System.Drawing.Bitmap whitelogo = Properties.Resources.defaultlogo;
        System.Drawing.Bitmap mainlogo = Properties.Resources.robopinglogo;
        System.Drawing.Bitmap redlogo = Properties.Resources.connecting;
        System.Drawing.Bitmap orangelogo = Properties.Resources.robopingorange;

        string route1 = "0.0.0.0";
        string route2 = "64.0.0.0";
        string route3 = "128.0.0.0";
        string route4 = "192.0.0.0";

        string conanroute1 = "92.118.16.86";
        string conanroute2 = "176.9.125.243";

        string discordroute1 = "162.159.0.0";
        string discordroute2 = "216.58.206.91";
        string discordroute3 = "34.0.0.0";
        string discordroute4 = "172.217.18.3";
        string discordroute5 = "142.250.185.0";
        string discordroute6 = "66.22.0.0";
        string discordroute7 = "34.126.0.0";
        string discordroute8 = "142.250.186.0";

        string youtube = "142.250.0.0";
        string youtube2 = "172.217.0.0";
        string youtube3 = "216.0.0.0";

        //string porn = "104.26.0.0";
        //string porn2 = "104.21.233.0";
        //string porn3 = "172.67.74.0";

        string esoroute1 = "159.0.0.0";

        string scum1 = "208.0.0.0";
        string scum2 = "51.0.0.0";
        string scum3 = "52.0.0.0";
        string scum4 = "34.0.0.0";
        string scum5 = "98.0.0.0";
        string scum6 = "176.0.0.0";

        string chiv1 = "162.19.107.114";
        string chiv2 = "20.0.0.0";
        string chiv3 = "89.0.0.0";
        string chiv4 = "51.89.0.0";
        string chiv5 = "192.244.212.226";
        string chiv6 = "198.244.212.226";

        string forhonor1 = "35.0.0.0";
        string forhonor2 = "47.0.0.0";

        string ubisoft1 = "35.0.0.0";
        string ubisoft2 = "67.0.0.0";
        string ubisoft3 = "52.0.0.0";
        string ubisoft4 = "192.229.0.0";
        string ubisoft5 = "99.83.0.0";
        string ubisoft6 = "172.64.0.0";

        string squad1 = "37.153.157.24";

        string r61 = "52.202.0.0";
        string r62 = "3.220.0.0";
        string r63 = "2.22.0.0";
        string r64 = "40.120.0.0";
        string r65 = "85.0.0.0";
        string r66 = "52.216.0.0";
        string r67 = "23.219.0.0";
        string r68 = "89.187.0.0";
        string r69 = "23.43.0.0";
        string r610 = "138.199.0.0";
        string r611 = "185.59.0.0";
        string r612 = "169.150.0.0";
        string r613 = "75.2.0.0";
        string r614 = "184.28.0.0";
        string r615 = "143.204.0.0";
        string r616 = "3.33.0.0";
        string r617 = "15.197.0.0";
        string r618 = "3.161.0.0";

        string cs21 = "103.10.0.0";
        string cs22 = "205.196.0.0";
        string cs23 = "162.254.0.0";
        string cs24 = "173.237.0.0";
        string cs25 = "155.133.0.0";
        // string cs24 = "155.33.0.0";
        // string cs26 = "146.66.0.0";
        // string cs27 = "92.122.0.0";
        // string cs28 = "37.27.0.0";


        string ea = "23.0.0.0";
        string ea2 = "44.0.0.0";
        string ea3 = "104.0.0.0";
        string ea4 = "2.0.0.0";
        string ea5 = "34.0.0.0";
        string ea6 = "89.0.0.0";
        string ea7 = "18.0.0.0";
        string ea8 = "184.85.0.0";
        string ea9 = "92.0.0.0";
        string ea10 = "184.86.0.0.0";

        string eaanticheat = "99.81.0.0";
        string eaanticheat2 = "54.0.0.0";
        string eaanticheat3 = "3.0.0.0";

        string fc25 = "184.0.0.0";
        string fc252 = "108.0.0.0";
        string fc253 = "35.0.0.0";

        string bf41 = "52.208.0.0";
        string bf42 = "54.236.0.0";

        string bf2042 = "3.0.0.0";
        string bf20422 = "52.0.0.0";
        string bf20423 = "3.0.0.0";
        string bf20424 = "54.0.0.0";
        string bf20425 = "99.80.0.0";
        string bf20426 = "18.199.0.0";
        string bf20427 = "16.0.0.0";
        string bf20428 = "157.0.0.0";

        string apex = "82.145.0.0";
        string apex2 = "108.181.0.0";
        string apex3 = "188.42.0.0";
        string apex4 = "95.154.0.0";
        string apex5 = "85.195.0.0";
        string apex6 = "77.92.0.0";
        string apex7 = "78.129.0.0";
        string apex8 = "37.61.0.0";
        string apex9 = "173.244.0.0";
        string apex10 = "31.204.0.0";
        string apex11 = "23.109.0.0";
        string apex12 = "2.16.0.0";
        string apex13 = "46.23.0.0";
        string apex14 = "212.78.0.0";

        string apex15 = "54.0.0.0";
        string apex16 = "88.202.177.0";
        string apex17 = "54.81.0.0";
        string apex18 = "204.74.0.0";
        string apex19 = "174.127.0.0";

        string xdef1 = "35.0.0.0";
        string xdef2 = "34.0.0.0";
        string xdef3 = "23.0.0.0";
        string xdef4 = "32.0.0.0";
        string xdef5 = "2.0.0.0";
        string xdef6 = "185.0.0.0";
        string xdef7 = "130.0.0.0";
        string xdef8 = "152.0.0.0";
        string xdef9 = "51.0.0.0";
        string xdef10 = "52.0.0.0";
        string xdef11 = "203.132.20.213";

        string riot = "104.18.0.0";
        string riot2 = "104.16.0.0";

        string LOL = "3.75.0.0";
        string LOL2 = "3.74.0.0";

        string rdr21 = "54.81.0.0";
        string rdr22 = "192.229.0.0";
        string rdr23 = "185.56.0.0";

        string mvs1 = "3.0.0.0";
        string mvs2 = "34.0.0.0";

        string sea1 = "172.0.0.0";
        string sea2 = "4.0.0.0";
        string sea3 = "13.0.0.0";
        string sea4 = "20.0.0.0";

        string ara = "104.0.0.0";
        string ara2 = "52.0.0.0";
        string ara3 = "40.0.0.0";
        string ara4 = "20.0.0.0";
        string ara5 = "13.0.0.0";
        string ara6 = "2.0.0.0";

        string epic = "104.18.0.0";

        string pubg = "18.156.0.0";
        string pubg2 = "18.157.0.0";

        string dayz = "195.82.158.69";
        string dayz2 = "193.25.252.34";
        string dayz3 = "138.199.0.0";
        string dayz4 = "169.150.0.0";
        string dayz5 = "89.187.0.0";
        string dayz6 = "185.59.0.0";
        string dayz7 = "193.25.252.49";
        string dayz8 = "5.252.100.101";

        string final = "34.0.0.0";
        string final2 = "35.0.0.0";
        string final3 = "104.18.0.0";

        string fivem = "172.0.0.0";
        string fivem2 = "142.0.0.0";
        string fivem3 = "188.114.0.0";
        string fivem4 = "104.0.0.0";
        string fivem5 = "40.69.0.0";
        string fivem6 = "52.177.0.0";
        string fivem7 = "173.237.0.0";
        string fivem8 = "137.74.0.0";
        string fivem9 = "20.98.0.0";
        string fivem10 = "155.133.0.0";
        string fivem11 = "164.254.0.0";
        string fivem12 = "205.196.0.0";
        string fivem13 = "35.190.0.0";
        string fivem14 = "185.199.0.0";
        string fivem15 = "103.10.0.0";
        string fivem16 = "162.254.0.0";

        string rage = "51.77.0.0";
        string rage2 = "54.36.0.0";

        string rockstar1 = "34.0.0.0";
        string rockstar2 = "23.0.0.0";
        string rockstar3 = "52.0.0.0";
        string rockstar4 = "104.0.0.0";
        string rockstar5 = "192.81.0.0";
        string rockstar6 = "2.0.0.0";

        string naraka1 = "2.0.0.0";
        string naraka2 = "42.0.0.0";
        string naraka3 = "104.0.0.0";
        string naraka4 = "18.0.0.0";
        string naraka5 = "35.0.0.0";
        string naraka6 = "34.0.0.0";
        string naraka7 = "96.0.0.0";
        string naraka8 = "23.0.0.0";

        string fortnite1 = "2.0.0.0";
        string fortnite2 = "3.0.0.0";
        string fortnite3 = "13.0.0.0";
        string fortnite4 = "15.0.0.0";
        string fortnite5 = "18.0.0.0";
        string fortnite6 = "34.0.0.0";
        string fortnite7 = "35.0.0.0";
        string fortnite8 = "96.0.0.0";
        string fortnite9 = "104.0.0.0";
        string fortnite10 = "146.0.0.0";
        string fortnite11 = "199.0.0.0";
        string fortnite12 = "15.184.0.0";

        string oncehuman1 = "23.0.0.0";
        string oncehuman2 = "35.0.0.0";
        string oncehuman3 = "34.0.0.0";
        string oncehuman4 = "95.0.0.0";
        string oncehuman5 = "40.0.0.0";
        // string oncehuman6 = "23.197.0.0";

        string faceit1 = "144.76.0.0";
        string faceit2 = "159.69.0.0";
        string faceit3 = "195.201.0.0";
        string faceit4 = "94.130.0.0";
        string faceit5 = "78.46.0.0";
        string faceit6 = "37.27.0.0";
        string faceit7 = "43.134.0.0";
        string faceit8 = "54.153.0.0";
        string faceit9 = "188.40.0.0";
        string faceit10 = "54.37.0.0";
        string faceit11 = "138.201.0.0";
        string faceit12 = "143.244.0.0";
        string faceit13 = "95.179.0.0";
        string faceit14 = "145.239.0.0";
        string faceit15 = "23.88.3.0";
        string faceit16 = "85.114.146.0";
        string faceit17 = "178.63.0.0";
        string faceit18 = "190.2.0.0";
        string faceit19 = "213.202.0.0";



        string starcitizen1 = "34.199.164.170";
        string starcitizen2 = "100.28.242.43";
        string starcitizen3 = "23.23.20.227";
        string starcitizen4 = "35.168.228.113";
        string starcitizen5 = "54.216.130.53";
        string starcitizen6 = "3.228.62.125";

        string raidshadow1 = "104.0.0.0";
        string raidshadow2 = "34.120.0.0";

        string newworld1 = "108.139.0.0";
        string newworld2 = "52.0.0.0";
        string newworld3 = "3.0.0.0";
        string newworld4 = "35.0.0.0";
        string newworld5 = "18.0.0.0";
        string newworld6 = "13.32.0.0";

        string arenabreakout = "43.0.0.0";
        string arenabreakout2 = "54.0.0.0";
        string arenabreakout3 = "52.0.0.0";
        string arenabreakout4 = "101.0.0.0";
        string arenabreakout5 = "129.0.0.0";
        string arenabreakout6 = "119.0.0.0";
        string arenabreakout7 = "150.0.0.0";
        string arenabreakout8 = "2.0.0.0";
        string arenabreakout9 = "23.0.0.0";
        string arenabreakout10 = "107.0.0.0";

        string forza5 = "23.0.0.0";
        string forza52 = "20.0.0.0";
        string forza53 = "104.0.0.0";
        string forza54 = "52.0.0.0";
        string forza55 = "40.0.0.0";
        string forza56 = "190.0.0.0";

        string koh = "78.0.0.0";
        string koh1 = "52.0.0.0";
        string koh2 = "54.0.0.0";
        string koh3 = "44.0.0.0";
        string koh4 = "162.0.0.0";
        string koh5 = "116.0.0.0";
        string koh6 = "157.0.0.0";
        string koh7 = "34.0.0.0";

        string space = "52.0.0.0";
        string space2 = "193.169.0.0";
        string space3 = "13.0.0.0";
        string space4 = "79.133.0.0";
        string space5 = "87.120.0.0";
        string space6 = "162.254.0.0";
        string space7 = "40.0.0.0";
        string space8 = "43.0.0.0";
        string space9 = "20.0.0.0";
        string space10 = "4.0.0.0";
        string space11 = "172.0.0.0";
        string space12 = "54.0.0.0";
        string space13 = "34.0.0.0";
        string space14 = "79.133.0.0";
        string space15 = "92.223.0.0";
        string space16 = "37.9.33.0";
        string space17 = "85.90.0.0";
        string space18 = "176.119.0.0";
        string space19 = "135.236.0.0";
        string space20 = "95.85.0.0";
        string space21 = "108.141.0.0";
        string space22 = "5.0.0.0";

        string overwatch = "137.221.0.0";
        string overwatch2 = "155.115.196.0";
        string overwatch3 = "64.0.0.0";
        string overwatch4 = "66.0.0.0";
        string overwatch5 = "34.88.0.0";
        string overwatch6 = "137.0.0.0";

        string genshin = "18.0.0.0";
        string genshin2 = "13.0.0.0";
        string genshin3 = "108.0.0.0";
        string genshin4 = "104.0.0.0";

        string mythology = "20.0.0.0";
        string mythology2 = "52.0.0.0";

        string dota = "188.0.0.0";
        string dota1 = "185.25.0.0";
        string dota2 = "162.254.0.0";
        string dota3 = "155.133.0.0";
        string dota4 = "147.75.0.0";
        string dota5 = "103.0.0.0";
        string dota6 = "74.201.0.0";
        string dota7 = "205.196.6.0";
        string dota8 = "173.237.0.0";
        string dota9 = "23.251.100.0";
        string dota10 = "68.169.42.0";
        string dota11 = "104.18.0.0";
        string dota12 = "172.64.0.0";
        string dota13 = "192.229.0.0";
        string dota14 = "148.72.0.0";



        string wow = "66.40.0.0";
        string wow2 = "216.239.0.0";
        string wow3 = "34.0.0.0";
        string wow4 = "142.250.187.0";
        string wow5 = "162.247.0.0";
        string wow6 = "13.35.58.0";
        string wow7 = "18.0.0.0";
        string wow8 = "143.204.98.0";

        string ck = "151.101.0.0";
        string ck1 = "54.156.142.1";
        string ck2 = "52.86.153.186";
        string ck3 = "52.45.215.172";
        string ck4 = "52.72.99.159";
        string ck5 = "18.245.0.0";
        string ck6 = "100.25.78.231";
        string ck7 = "35.173.3.154";

        string hunt = "212.95.0.0";
        string hunt2 = "178.162.0.0";
        string hunt3 = "88.221.0.0";
        string hunt4 = "85.236.0.0";
        string hunt5 = "84.16.0.0";
        string hunt6 = "78.159.0.0";
        string hunt7 = "46.165.0.0";
        string hunt8 = "52.0.0.0";
        string hunt9 = "50.0.0.0";
        string hunt10 = "54.0.0.0";
        string hunt11 = "44.0.0.0";
        string hunt12 = "35.0.0.0";
        string hunt13 = "34.0.0.0";
        string hunt14 = "13.0.0.0";
        string hunt15 = "3.0.0.0";

        string nvidia = "72.25.0.0";
        string nvidia2 = "68.232.0.0";
        string nvidia3 = "152.199.0.0";
        string nvidia4 = "192.229.0.0";
        string nvidia5 = "107.151.0.0";
        string nvidia6 = "185.136.0.0";
        string nvidia7 = "34.241.0.0";

        string fs221 = "195.201.0.0";
        string fs222 = "176.9.144.144";
        string fs223 = "78.47.98.190";
        string fs224 = "157.90.93.0";
        string fs225 = "94.130.0.0";
        string fs226 = "116.202.0.0";
        string fs227 = "46.251.0.0";
        string fs228 = "31.0.0.0";
        string fs229 = "54.0.0.0";
        string fs2210 = "3.0.0.0";
        string fs2211 = "35.0.0.0";
        string fs2212 = "5.0.0.0";

        string cod1 = "23.0.0.0";
        string cod2 = "185.0.0.0";
        string cod3 = "34.0.0.0";
        string cod4 = "108.0.0.0";
        string cod5 = "134.0.0.0";
        string cod6 = "4.0.0.0";
        string cod7 = "192.248.0.0";
        string cod8 = "199.0.0.0";

        string ofthegrid1 = "109.0.0.0";
        string ofthegrid2 = "78.0.0.0";
        string ofthegrid3 = "82.0.0.0";
        string ofthegrid4 = "87.0.0.0";
        string ofthegrid5 = "130.0.0.0";
        string ofthegrid6 = "44.0.0.0";
        string ofthegrid7 = "20.0.0.0";
        string ofthegrid8 = "13.0.0.0";

        string marvel1 = "35.0.0.0";
        string marvel2 = "34.0.0.0";
        // string marvel3 = "2.19.0.0";

        string spotify1 = "151.101.0.0";
        string spotify2 = "104.199.0.0";
        string spotify3 = "35.186.224.0";
        string spotify4 = "2.0.0.0";

        string coh21 = "3.0.0.0";
        string coh22 = "52.206.0.0";
        string coh23 = "35.158.0.0";
        string coh24 = "18.0.0.0";

        string coh31 = "3.0.0.0";
        string coh32 = "44.0.0.0";
        string coh33 = "54.0.0.0";

        string darkanddarker1 = "35.71.0.0";
        string darkanddarker2 = "52.223.0.0";
        string darkanddarker3 = "54.148.0.0";
        string darkanddarker4 = "103.10.0.0";
        string darkanddarker5 = "104.18.0.0";
        string darkanddarker6 = "35.71.0.0";
        string darkanddarker7 = "152.199.0.0";
        string darkanddarker8 = "155.133.0.0";
        string darkanddarker9 = "162.254.0.0";
        string darkanddarker10 = "172.64.0.0";

        string destiny21 = "169.150.0.0";
        string destiny22 = "37.0.0.0";
        string destiny23 = "172.0.0.0";
        string destiny24 = "138.190.0.0";
        string destiny25 = "79.0.0.0";
        string destiny26 = "155.0.0.0";
        string destiny27 = "205.0.0.0";

        string lostark1 = "13.0.0.0";
        string lostark2 = "3.0.0.0";
        string lostark3 = "18.0.0.0";
        string lostark4 = "52.0.0.0";


        string steeldivision2 = "178.32.0.0";

        string lotronline1 = "2.19.126.0";
        string lotronline12 = "198.252.0.0";

        string throneandliberty1 = "18.0.0.0";
        string throneandliberty2 = "172.0.0.0";
        string throneandliberty3 = "13.32.0.0";
        string throneandliberty4 = "98.0.0.0";
        string throneandliberty5 = "52.0.0.0";

        string threekingdom1 = "108.158.0.0";
        string threekingdom2 = "35.168.0.0";
        string threekingdom3 = "3.167.0.0";
        string threekingdom4 = "18.66.0.0";
        string threekingdom5 = "34.250.0.0";
        string threekingdom6 = "13.32.0.0";

        string warhammer31 = "108.158.0.0";
        string warhammer32 = "52.0.0.0";
        string warhammer33 = "18.66.0.0";
        string warhammer34 = "37.27.0.0";
        string warhammer35 = "34.250.0.0";
        string warhammer36 = "13.32.0.0";

        string vrchat1 = "52.88.0.0";
        string vrchat2 = "104.18.0.0";
        string vrchat3 = "108.158.0.0";
        string vrchat4 = "188.114.0.0";

        string helldivers1 = "52.200.0.0";
        string helldivers2 = "20.0.0.0";
        string helldivers3 = "155.133.0.0";
        string helldivers4 = "162.254.0.0";
        string helldivers5 = "68.154.0.0";
        string helldivers6 = "172.0.0.0";
        string helldivers7 = "3.0.0.0";

        string efootball1 = "18.0.0.0";
        string efootball2 = "54.0.0.0";
        string efootball3 = "44.0.0.0";
        string efootball4 = "52.0.0.0";
        string efootball5 = "35.0.0.0";
        string efootball6 = "34.0.0.0";
        string efootball7 = "108.158.0.0";
        string efootball8 = "130.0.0.0";
        string efootball9 = "88.0.0.0";
        string efootball10 = "94.0.0.0";

        string whatisip = "104.19.0.0";

        string amongus = "104.22.0.0";
        string amongus2 = "172.67.0.0";
        string amongus3 = "52.200.0.0";
        string amongus4 = "34.120.0.0";
        string amongus5 = "44.0.0.0";
        string amongus6 = "155.33.0.0";
        string amongus7 = "162.254.0.0";

        string deadbydaylight = "50.0.0.0";
        string deadbydaylight2 = "52.0.0.0";
        string deadbydaylight3 = "72.0.0.0";
        string deadbydaylight4 = "155.33.0.0";
        string deadbydaylight5 = "103.10.0.0";
        string deadbydaylight6 = "18.0.0.0";
        string deadbydaylight7 = "54.0.0.0";
        string deadbydaylight8 = "3.0.0.0";

        string deadlock = "103.10.0.0";
        string deadlock2 = "162.254.0.0";
        string deadlock3 = "155.133.0.0";
        string deadlock4 = "205.196.0.0";
        string deadlock5 = "173.237.0.0";

        string insurgencysandstorm = "13.107.0.0";
        string insurgencysandstorm1 = "85.236.0.0";
        string insurgencysandstorm2 = "3.0.0.0";
        string insurgencysandstorm3 = "184.19.0.0";
        string insurgencysandstorm4 = "52.0.0.0";
        string insurgencysandstorm5 = "207.231.0.0";
        string insurgencysandstorm6 = "18.0.0.0";
        string insurgencysandstorm7 = "50.0.0.0";
        string insurgencysandstorm8 = "85.236.0.0";
        string insurgencysandstorm9 = "44.0.0.0";

        string warthunder = "169.150.0.0";
        string warthunder2 = "185.59.0.0";
        string warthunder3 = "138.199.0.0";
        string warthunder4 = "104.22.0.0";
        string warthunder5 = "18.0.0.0";
        string warthunder6 = "89.43.0.0";

        string paladins = "155.133.0.0";
        string paladins2 = "18.244.0.0";
        string paladins3 = "162.254.0.0";
        string paladins4 = "103.10.0.0";
        string paladins5 = "54.0.0.0";
        string paladins6 = "3.0.0.0";
        string paladins7 = "20.33.41.0";
        string paladins8 = "20.33.45.0";
        string paladins9 = "34.0.0.0";
        string paladins10 = "35.0.0.0";
        string paladins11 = "2.19.0.0";

        string readyornot = "155.133.0.0";
        string readyornot2 = "162.159.0.0";
        string readyornot3 = "85.236.0.0";
        string readyornot4 = "103.10.0.0";
        string readyornot5 = "205.196.0.0";
        string readyornot6 = "162.254.0.0";
        string readyornot7 = "157.245.0.0";
        string readyornot8 = "173.237.0.0";
        string readyornot9 = "144.66.0.0";
        string readyornot10 = "185.25.0.0";
        string readyornot11 = "37.27.0.0";
        string readyornot12 = "146.66.0.0";
        string readyornot13 = "188.42.0.0";
        string readyornot14 = "172.66.0.0";
        string readyornot15 = "26.193.0.0";

        string mythofempires = "49.51.0.0";
        string mythofempires2 = "43.0.0.0";
        string mythofempires3 = "92.118.0.0";
        string mythofempires4 = "109.230.0.0";
        string mythofempires5 = "37.10.0.0";
        string mythofempires6 = "173.237.0.0";
        string mythofempires7 = "162.254.0.0";
        string mythofempires8 = "155.133.0.0";
        string mythofempires9 = "103.0.0.0";
        string mythofempires10 = "205.196.0.0";
        string mythofempires11 = "43.175.0.0";
        string mythofempires12 = "11.229.0.0";
        string mythofempires13 = "120.26.0.0";
        string mythofempires14 = "169.150.0.0";

        string predecessor = "54.209.0.0";
        string predecessor2 = "3.14.0.0";
        string predecessor3 = "35.244.0.0";
        string predecessor4 = "44.0.0.0";
        string predecessor5 = "104.21.0.0";
        string predecessor6 = "155.133.0.0";
        string predecessor7 = "162.254.0.0";

        string unturned = "138.199.0.0";
        string unturned2 = "143.244.0.0";
        string unturned3 = "169.150.0.0";

        string rust = "3.0.0.0";
        string rust2 = "37.0.0.0";
        string rust3 = "44.0.0.0";
        string rust4 = "45.0.0.0";
        string rust5 = "46.0.0.0";
        string rust6 = "50.0.0.0";
        string rust7 = "52.0.0.0";
        string rust8 = "54.0.0.0";
        string rust9 = "64.0.0.0";
        string rust10 = "68.0.0.0";
        string rust11 = "71.0.0.0";
        string rust12 = "75.0.0.0";
        string rust13 = "96.0.0.0";
        string rust14 = "98.0.0.0";
        string rust15 = "99.0.0.0";
        string rust16 = "104.0.0.0";
        string rust17 = "145.0.0.0";
        string rust18 = "168.0.0.0";
        string rust19 = "185.0.0.0";
        string rust20 = "195.0.0.0";
        string rust21 = "199.0.0.0";
        string rust22 = "79.0.0.0";
        string rust23 = "208.0.0.0";
        string rust24 = "57.0.0.0";
        string rust25 = "79.0.0.0";

        string truckersmp = "158.69.120.230";
        string truckersmp2 = "91.134.10.109";
        string truckersmp3 = "51.210.222.226";

        string hellletloose = "85.236.0.0";
        string hellletloose2 = "3.127.0.0";

        string pathofexile2 = "172.65.0.0";
        string pathofexile21 = "2.23.0.0";
        string pathofexile22 = "104.16.0.0";

        string phasmophobia = "91.0.0.0";
        string phasmophobia2 = "34.0.0.0";
        string phasmophobia3 = "23.0.0.0";

        string fallguys = "54.209.0.0";
        string fallguys2 = "52.0.0.0";
        string fallguys3 = "51.0.0.0";
        string fallguys4 = "20.112.0.0";
        string fallguys5 = "34.192.0.0";
        string fallguys6 = "3.231.0.0";
        string fallguys7 = "13.107.0.0";

        public Main(string message)
        {
            InitializeComponent();
            InitializeMessages();

            if (uploadCounter == null)

                uploadCounter = new PerformanceCounter("Process", "IO Write Bytes/sec", "RPO");


            if (downloadCounter == null)

                downloadCounter = new PerformanceCounter("Process", "IO Read Bytes/sec", "RPO");

            // Start a timer to update the labels every second

            System.Windows.Forms.Timer timer3 = new System.Windows.Forms.Timer();

            timer3.Interval = 500; // 0.5 second interval for updating

            timer3.Tick += Timer_Tick3;

            timer3.Start();

            setting = new SETTINGS();
            about = new about();
            games = new Games();

            downpanel.Controls.Add(setting);
            // downpanel.Controls.Add(about);
            downpanel.Controls.Add(games);

            setting.Dock = DockStyle.Fill;
            //  about.Dock = DockStyle.Fill;
            games.Dock = DockStyle.Fill;

            setting.Visible = false;
            //  about.Visible = false;
            games.Visible = false;


            // Set up the timer
            timer = new Timer
            {
                Interval = 30000 // 0.5 minute in milliseconds
            };
            timer.Tick += Timer_Tick;

            /*
            timer = new System.Windows.Forms.Timer();
            timer.Interval = 10000; // 5 second
            timer.Tick += Timer_Tick;
            */



            SessionStart();

            instance = this;

            //   NetworkChange.NetworkAvailabilityChanged += NetworkChange_NetworkAvailabilityChanged;


            check = new checkforupdate();
            eror = new ERROR();

            // Split the ResponseData into two parts based on space
            string[] responsePartss = message.Split(' ');

            // Extract the number part of ResponseData
            string numberPart = responsePartss.Length > 1 ? responsePartss[1] : "0";
            int numberPartt = int.Parse(numberPart);

            // Update the progress bar value
            //  guna2ProgressBar1.Value = Math.Min(numberPartt, guna2ProgressBar1.Maximum);

            // Display the number part in label7 with "Days" appended
            label15.Text = $"{numberPartt} Days";

            // Split the response based on space
            string[] responseParts = message.Split(' ');

            // Extract the word before the space
            string wordBeforeSpace = responseParts.Length > 0 ? responseParts[0] : "NoWord";

            // Display the word before space
            usernamefirst.Text = wordBeforeSpace;

        }
        private async void Form1_Load(object sender, EventArgs e)
        {


            await Task.Run(async () =>
            {

                this.DoubleBuffered = true;
                this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
                this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
                this.SetStyle(ControlStyles.ResizeRedraw, true);

                if (!Properties.Settings.Default.IsMessageShown)
                {
                    gameinfo.Invoke((Action)(() =>
                    {
                        // Show the message and buttons
                        DisplayCurrentMessage();
                        leftside.Visible = true;
                        rightside.Visible = true;
                        isMessageVisible = true; // Update the flag
                    }));

                    // Mark the message as shown
                    Properties.Settings.Default.IsMessageShown = true;
                    Properties.Settings.Default.Save();
                }


                broute1.FillColor = Color.FromArgb(190, 11, 12, 16);
                broute2.FillColor = Color.FromArgb(190, 11, 12, 16);
                broute3.FillColor = Color.FromArgb(190, 11, 12, 16);
                broute4.FillColor = Color.FromArgb(190, 11, 12, 16);
                guna2ControlBox1.FillColor = Color.FromArgb(190, 11, 12, 16);
                guna2ControlBox2.FillColor = Color.FromArgb(190, 11, 12, 16);

                //  await Task.Delay(1500);
                guna2CircleButton4.Image = whitelogo;

                Invoke(new MethodInvoker(async delegate
                {
                    try
                    {
                        // Retrieve the username from usernamefirst TextBox
                        string username = usernamefirst.Text;

                        // Replace with the URL of your PHP script
                        string url = "https://roboping.ir/api/setdownload.php";

                        using (HttpClient client = new HttpClient())
                        {
                            var content = new FormUrlEncodedContent(new[]
                            {
                               new KeyValuePair<string, string>("username", username)
                            });

                            try
                            {
                                HttpResponseMessage response = await client.PostAsync(url, content);

                                if (response.IsSuccessStatusCode)
                                {
                                    string responseString = await response.Content.ReadAsStringAsync();


                                    // Parse the JSON response
                                    var jsonResponse = JObject.Parse(responseString);

                                    // Extract download values
                                    if (jsonResponse.ContainsKey("downloads") && jsonResponse.ContainsKey("max_download_limit"))

                                    {

                                        // Remove " MB" and convert to integers

                                        int downloads = Convert.ToInt32(jsonResponse["downloads"].ToString().Replace(" MB", "").Trim());

                                        int maxDownloadLimit = Convert.ToInt32(jsonResponse["max_download_limit"].ToString().Replace(" MB", "").Trim());


                                        // Check if downloads are equal to maximum limit
                                        /*
                                        if (downloads >= maxDownloadLimit)

                                        {

                                            Login mainForm1 = new Login();

                                            this.Hide();

                                            mainForm1.Show();

                                            Invoke(new MethodInvoker(delegate
                                            {
                                                // MessageBox.Show(message);

                                                eror.showdialog();
                                                ERROR.instance.errortext.Text = "شارژ حسابت تموم شده باید شارژش کنی فقط کافیه به سایت روبوپینگ بری که برات بازش کردم, مرورگرتو چک کن ";

                                                string urlll = "https://roboping.ir/login";

                                                try
                                                {
                                                    Process.Start(urlll);
                                                }
                                                catch (Exception)
                                                {
                                                    eror.showdialog();
                                                    ERROR.instance.errortext.Text = "صفحه سایت روبوپینگ یافت نشد";
                                                    Console.WriteLine("صفحه سایت روبوپینگ یافت نشد");
                                                }
                                            }));

                                            return; // Exit the method if the limit has been reached

                                        }
                                        */

                                        // Update the display for downloaded MB




                                        // Calculate remaining downloads

                                        int remainingDownloads = maxDownloadLimit - downloads;

                                        guna2TextBox10.Text = $"{remainingDownloads:0} MB";

                                        // Calculate gauge value based on remaining downloads

                                        double percentage = (double)remainingDownloads / maxDownloadLimit * 100;


                                        // Clamp the gauge value to the 0-100 range

                                        int gaugeValue = (int)Math.Round(percentage);

                                        gaugeValue = Math.Max(0, Math.Min(100, gaugeValue)); // Ensure value is within 0-100 range


                                        // Update the gauge and progress bar

                                        guna2RadialGauge1.Value = gaugeValue; // Set gauge value based on the percentage of remaining downloads

                                        guna2ProgressBar1.Maximum = maxDownloadLimit; // Set maximum based on max download limit

                                        guna2ProgressBar1.Value = remainingDownloads; // Set current value based on actual downloads
                                        maxdownloadMBFromServer = maxDownloadLimit;
                                    }
                                    else
                                    {

                                        Invoke(new MethodInvoker(delegate
                                        {
                                            // MessageBox.Show(message);

                                            eror.showdialog();
                                            ERROR.instance.errortext.Text = "فرمت ارسالی اشتباه است";

                                            Console.WriteLine("فرمت ارسالی اشتباه است");
                                        }));

                                    }
                                }
                                else
                                {
                                    string errorDetail = await response.Content.ReadAsStringAsync();

                                    Invoke(new MethodInvoker(delegate
                                    {
                                        // MessageBox.Show(message);

                                        eror.showdialog();
                                        ERROR.instance.errortext.Text = "جواب موفقیت آمیز نبوده ";

                                        Console.WriteLine($"Error: {response.StatusCode}, Details: {errorDetail}");
                                    }));
                                }
                            }
                            catch (Exception ex)
                            {

                                Invoke(new MethodInvoker(delegate
                                {

                                    eror.showdialog();
                                    ERROR.instance.errortext.Text = "ارتباط با سرور برای حجم صورت نگرفت ";

                                    Console.WriteLine("Exception: " + ex.Message);
                                }));
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }

                    totalMBFromServer += guna2ProgressBar1.Value;


                }));



                /*
                                try

                                {

                                    await Task.Run(async () =>

                                    {

                                        try

                                        {

                                            // Setup connection parameters

                                            int port = 3999;

                                            string server = "robo.roboping.ir";

                                            string username = usernamefirst.Text;


                                            using (TcpClient client = new TcpClient())

                                            {

                                                // Set timeout for connection

                                                client.ReceiveTimeout = 5000; // 5 seconds

                                                client.SendTimeout = 5000; // 5 seconds


                                                // Attempt to connect

                                                await client.ConnectAsync(server, port);

                                                using (NetworkStream stream = client.GetStream())

                                                {

                                                    // Send the username

                                                    byte[] data = Encoding.ASCII.GetBytes(username);

                                                    await stream.WriteAsync(data, 0, data.Length);

                                                    Console.WriteLine("Username sent: {0}", username);


                                                    // Receive the response from the server

                                                    byte[] buffer = new byte[256]; // Buffer for incoming data


                                                    // Set read timeout (this may not work as expected for NetworkStream)

                                                    int bytesRead = await ReadWithTimeout(stream, buffer, 5000);


                                                    // Convert the response to a string

                                                    string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                                                    Console.WriteLine("Server response: {0}", response);


                                                    // Parse and update the UI safely

                                                    if (int.TryParse(response, out int progressValue))

                                                    {
                                                        int maxValue = int.Parse(response);

                                                        guna2ProgressBar1.Maximum = maxValue;


                                                        this.Invoke((MethodInvoker)(() =>

                                                        {


                                                            guna2RadialGauge1.Value = Clamp(progressValue, 0, guna2RadialGauge1.Maximum);

                                                            guna2ProgressBar1.Value = Clamp(progressValue, 0, guna2ProgressBar1.Maximum);


                                                            guna2TextBox10.Text = $"{progressValue:0} MB";


                                                        }));

                                                    }

                                                }

                                            }

                                        }

                                        catch (SocketException sockEx)

                                        {

                                            Console.WriteLine($"Socket error: {sockEx.Message}");
                                            Invoke(new MethodInvoker(delegate
                                            {
                                                Login mainForm1 = new Login();

                                                this.Hide();

                                                mainForm1.Show();
                                            }));

                                            ShowErrorDialog(" گره مشکلاتی در اتصال به سرور حجمی وجود داره دوباره تلاش کنید و در صورت گرفتن دوباره ارور به پشتیبانی خبر بده");

                                        }

                                        catch (Exception ex)

                                        {

                                            Console.WriteLine($"Error in network connection: {ex.Message}");

                                            Invoke(new MethodInvoker(delegate
                                            {
                                                Login mainForm1 = new Login();

                                                this.Hide();

                                                mainForm1.Show();
                                            }));

                                            ShowErrorDialog("یه مشکلی در رابطه با دریافت حجمت پیش اومده دوباره سعی کن اگر نشد به پشتیبانی خبر بده");
                                        }

                                    });


                                    // Continue with loading more data



                                }

                                catch (Exception ex)

                                {

                                    // Log outer exceptions

                                    Console.WriteLine($"Outer error: {ex.Message}");

                                    Invoke(new MethodInvoker(delegate
                                    {
                                        Login mainForm1 = new Login();

                                        this.Hide();

                                        mainForm1.Show();
                                    }));

                                    ShowErrorDialog("یه مشکلی در حین بارگذاری داده‌های حجمت پیش آمد.");
                                }
                */
                await LoadMoreDataAsync("robo.roboping.ir", 6061);
            });



        }

        private void ShowErrorDialog(string message)

        {
            Invoke(new MethodInvoker(delegate
            {
                // MessageBox.Show(message);

                eror.showdialog();
                ERROR.instance.errortext.Text = $"{message}";
            }));
        }
        private async Task<int> ReadWithTimeout(NetworkStream stream, byte[] buffer, int timeout)
        {
            var tcs = new TaskCompletionSource<int>();

            // Start the read operation
            var readTask = stream.ReadAsync(buffer, 0, buffer.Length);

            // Continue with handling of the completed task
            readTask.ContinueWith(t =>
            {
                if (t.IsFaulted)
                {
                    tcs.SetException(t.Exception.InnerExceptions);
                }
                else if (t.IsCanceled)
                {
                    tcs.SetCanceled();
                }
                else
                {
                    tcs.SetResult(t.Result);
                }
            });

            // Wait for either the read task to complete or the timeout
            if (await Task.WhenAny(tcs.Task, Task.Delay(timeout)) == tcs.Task)
            {
                return await tcs.Task; // This returns the result of the read task
            }
            else
            {
                throw new TimeoutException("Reading from the stream timed out.");
            }
        }



        private async Task LoadMoreDataAsync(string serverIp, int serverPort)

        {

            try

            {

                using (TcpClient client = new TcpClient())

                {

                    // Connect to the server with a timeout

                    await client.ConnectAsync(serverIp, serverPort);


                    using (NetworkStream stream = client.GetStream())

                    {

                        byte[] buffer = new byte[1024];

                        StringBuilder data = new StringBuilder();

                        int bytesRead;


                        // Read data from the server asynchronously

                        while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)

                        {

                            data.Append(Encoding.UTF8.GetString(buffer, 0, bytesRead));

                        }


                        // Update newsbox on the UI thread

                        this.Invoke((MethodInvoker)delegate

                        {

                            newsbox.Text = data.ToString().Replace("\r", ""); // Optional: Clean up line endings

                        });

                    }

                }

            }

            catch (Exception ex)

            {

                // Handle exceptions that occur during reading

                MessageBox.Show("ارور4: " + ex.Message);

                Console.WriteLine($"ارور: " + ex.Message);

            }

        }


        public async Task ConnectAsyncSession(string serverip, int serverport)
        {
            client = new TcpClient();

            await client.ConnectAsync(serverip, serverport);

            // Create a network stream for sending and receiving data
            stream = client.GetStream();

        }
        private async Task SendDataAsync(string data, string username)

        {

            if (stream != null && !string.IsNullOrEmpty(username))

            {

                byte[] bytes = Encoding.UTF8.GetBytes(data);

                await stream.WriteAsync(bytes, 0, bytes.Length);

            }

            else

            {


            }

        }
        public async Task<string> ReceiveDataAsync()
        {
            if (stream != null)
            {
                byte[] buffer = new byte[10000];
                int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                string responseData = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                return responseData;
            }
            else
            {

                return string.Empty;
            }
        }

        public void Close2()
        {
            Invoke(new MethodInvoker(delegate
            {
                stream.Close();
                client.Close();
            }));
        }
        private async void SessionStart()
        {
            // await Task.Delay(2000);
            try
            {
                // Assume ConnectAsyncSession, SendDataAsync, and ReceiveDataAsync are async methods
                await ConnectAsyncSession("robo.roboping.ir", 7073);

                UserData userData = new UserData { username = usernamefirst.Text, Action = "start" }; // Adjust this line as needed
                string jsonData = JsonConvert.SerializeObject(userData);

                // Send the request to the server to start session
                await SendDataAsync(jsonData, userData.username);
                string ResponseData = await ReceiveDataAsync();
                // MessageBox.Show(ResponseData);

                isSessionActive = true;
                await SendHeartBeat(); // Send the first heartbeat immediately
                StartHeartbeatTimer();
            }
            catch
            {


                if (isSessionActive1 == true)
                {
                    SessionStop();
                }

                await Task.Delay(10000);

                SessionStart();
                Console.WriteLine("تلاش دوباره برای ارسال نبض");


            }
        }

        public void SessionStop()
        {
            try
            {
                isSessionActive = false;
                isSessionActive1 = false;
                heartbeatTimer?.Stop();

                Close2();
            }
            catch (Exception)
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "نبض روبوپنگ قطع شده نه دکتر نمیخواد به پشتیبانی خبر بده";

                Console.WriteLine("نبض روبوپنگ قطع شده نه دکتر نمیخواد به پشتیبانی خبر بده");
            }

        }
        private void StartHeartbeatTimer()
        {

            try
            {
                heartbeatTimer = new System.Windows.Forms.Timer(); // No arguments here
                heartbeatTimer.Interval = 15000; // Set to 10 seconds for subsequent heartbeats
                heartbeatTimer.Tick += async (sender, e) => await SendHeartBeat();
                heartbeatTimer.Start();
            }
            catch (Exception)
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "تو ارسال نبض روبوپینگ مشکلی هست فقط به پشتیبانی خبر بده";

                Console.WriteLine("تو ارسال زمان نبض روبوپینگ مشکلی هست فقط به پشتیبانی خبر بده");

            }
        }

        private async Task SendHeartBeat()
        {

            if (!isSessionActive) return;


            try

            {

                if (string.IsNullOrEmpty(usernamefirst.Text))

                {

                    SessionStart();
                    return; // Exit early if username is not set
                }


                UserData userData = new UserData { username = usernamefirst.Text, Action = "heartbeat" }; // Adjust this line as needed

                string jsonData = JsonConvert.SerializeObject(userData);


                // Throttle control: Add a check for send rate

                if (CanSendHeartbeat())

                {

                    await ConnectAsyncSession("robo.roboping.ir", 7073);

                    await SendDataAsync(jsonData, userData.username);

                    isSessionActive1 = true;

                }

                else

                {


                }

            }
            catch
            {

                SessionStop();

                SessionStart();
            }

        }

        private DateTime lastHeartbeatTime = DateTime.MinValue;


        // Simple throttle mechanism to limit heartbeat sending

        private bool CanSendHeartbeat()

        {

            if ((DateTime.Now - lastHeartbeatTime).TotalSeconds < 14) // Assuming 20 seconds as the minimum interval

            {

                return false; // Too soon to send another heartbeat

            }


            lastHeartbeatTime = DateTime.Now;

            return true; // Can send heartbeat

        }

        private void Timer_Tick2(object sender, EventArgs e)
        {

            if (guna2ProgressBar1.Value == 0)
            {
                Invoke(new MethodInvoker(delegate
                {
                    count = false;
                    guna2CircleButton4.Image = orangelogo;
                    guna2TextBox1.Text = "Closing Routes...";

                    label11.Text = "0.0 KB";
                    label10.Text = "0.0 KB";

                    gameinfo.Visible = false;

                    KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                    Closeroute();

                    guna2CircleButton4.Image = whitelogo;
                    guna2CircleButton4.BorderColor = Color.White;
                    guna2TextBox1.Visible = false;
                    guna2CircleProgressBar1.Value = 0;
                    guna2CircleProgressBar2.Value = 0;
                    guna2CircleButton4.BorderThickness = 2;

                    timer2.Stop();
                    isRunning2 = false;

                    Console.WriteLine("متاسفانه حجمت تموم شده شارژش کن تا دوباره بتونی از روبوپینگ استفاده کنی");

                    eror.showdialog();
                    ERROR.instance.errortext.Text = "متاسفانه حجمت تموم شده شارژش کن تا دوباره بتونی از روبوپینگ استفاده کنی";
                }));
            }
            else
            {
                this.Invoke(new Action(async () =>
                {
                    await CheckAndSendProgressDifferenceAsync();

                }));
            }


            /*
            
            this.Invoke(new Action(async () =>
            {

                try
                {
                    using (TcpClient client = new TcpClient("robo.roboping.ir", 4949))
                    using (NetworkStream stream = client.GetStream())
                    {
                        string data = $"{usernamefirst.Text} {guna2ProgressBar1.Value} MB";
                        byte[] bytesToSend = Encoding.ASCII.GetBytes(data);

                        // Send data to the server
                        await stream.WriteAsync(bytesToSend, 0, bytesToSend.Length);

                        // Wait for a response
                        byte[] buffer = new byte[1024];
                        int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                        string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                        // Handle the response
                        if (response == "STOP")
                        {
                            Invoke(new MethodInvoker(delegate
                            {
                                count = false;
                                guna2CircleButton4.Image = orangelogo;
                                guna2TextBox1.Text = "Closing Routes...";

                                label11.Text = "0.0 KB";
                                label10.Text = "0.0 KB";

                                gameinfo.Visible = false;

                                KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                                Closeroute();
                                eror.showdialog();
                                ERROR.instance.errortext.Text = "حساب کاربری شما به حجم تعیین شده رسیده است لطفا برای شارژ حساب خود به سایت روبوپینگ جهت خرید شارژ مراجعه کنید";

                                guna2CircleButton4.Image = whitelogo;
                                guna2CircleButton4.BorderColor = Color.White;
                                guna2TextBox1.Visible = false;
                                guna2CircleProgressBar1.Value = 0;
                                guna2CircleProgressBar2.Value = 0;
                                guna2CircleButton4.BorderThickness = 2;
                            }));
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"ارور: {ex.Message}");
                }
            }));
            */
        }
        private int lastDifference = 0;
        private static readonly HttpClient httpClient = new HttpClient();

        private async Task CheckAndSendProgressDifferenceAsync()
        {
            // Check if progress bar control is initialized
            if (guna2ProgressBar1 != null)
            {
                int maxValue = guna2ProgressBar1.Maximum; // Get Maximum Value
                int currentValue = guna2ProgressBar1.Value; // Get Current Value
                /*
                // Show the values in a MessageBox
                MessageBox.Show($"Max Value: {maxValue}\nCurrent Value: {currentValue}",
                                "Progress Bar Values",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Information);
                */
                int difference = maxValue - currentValue;

                // Check if the difference has changed since the last send
                if (difference != lastDifference)
                {
                    lastDifference = difference; // Update lastDifference
                    await SendDataToServerAsync(usernamefirst.Text, difference); // Send data to server
                }
            }
            else
            {
                MessageBox.Show("Progress bar is not initialized.");
            }
        }

        private async Task SendDataToServerAsync(string username, int difference)
        {
            try
            {
                // Check if difference is equal to zero
                if (difference == maxdownloadMBFromServer)
                {
                    Invoke(new MethodInvoker(delegate
                    {
                        count = false;
                        guna2CircleButton4.Image = orangelogo;
                        guna2TextBox1.Text = "Closing Routes...";

                        label11.Text = "0.0 KB";
                        label10.Text = "0.0 KB";

                        gameinfo.Visible = false;

                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        Closeroute();

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        timer2.Stop();
                        isRunning2 = false;

                        Console.WriteLine("متاسفانه حجمت تموم شده شارژش کن تا دوباره بتونی از روبوپینگ استفاده کنی");

                        eror.showdialog();
                        ERROR.instance.errortext.Text = "متاسفانه حجمت تموم شده شارژش کن تا دوباره بتونی از روبوپینگ استفاده کنی";
                    }));
                    return; // Exit the method early
                }

                var content = new FormUrlEncodedContent(new[]
                {
            new KeyValuePair<string, string>("username", username),
            new KeyValuePair<string, string>("difference", difference.ToString())
                });

                // Send the data to the server
                var response = await httpClient.PostAsync("https://roboping.ir/api/downloadcount.php", content);
                response.EnsureSuccessStatusCode(); // Ensure the HTTP response is successful

                // Read the server's response
                string responseBody = await response.Content.ReadAsStringAsync();

                Console.WriteLine(difference);
                // MessageBox.Show("Data sent successfully!\nServer Response: " + responseBody);
            }
            catch (Exception ex)
            {
                //MessageBox.Show($"Error sending data: {ex.Message}");
                Console.WriteLine($"Error sending data: {ex.Message}");
            }
        }




        private int Clamp(int value, int min, int max)

        {

            return Math.Max(min, Math.Min(value, max));

        }

        private async void Timer_Tick3(object sender, EventArgs e)
        {




            if (count == true)
            {

                if (guna2ProgressBar1.Value == 0)
                {
                    Invoke(new MethodInvoker(delegate
                    {
                        count = false;
                        guna2CircleButton4.Image = orangelogo;
                        guna2TextBox1.Text = "Closing Routes...";

                        label11.Text = "0.0 KB";
                        label10.Text = "0.0 KB";

                        gameinfo.Visible = false;

                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        Closeroute();

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        timer2.Stop();
                        isRunning2 = false;

                        Console.WriteLine("متاسفانه حجمت تموم شده شارژش کن تا دوباره بتونی از روبوپینگ استفاده کنی");

                        eror.showdialog();
                        ERROR.instance.errortext.Text = "متاسفانه حجمت تموم شده شارژش کن تا دوباره بتونی از روبوپینگ استفاده کنی";
                    }));
                }

                try

                {

                    // Get network usage in a separate task

                    await Task.Run(() =>
                    {

                        try
                        {
                            // Get current download and upload usage
                            float networkDownloadBytes = downloadCounter.NextValue();
                            float networkUploadBytes = uploadCounter.NextValue();

                            // Calculate MB and KB
                            float networkDownloadMB = networkDownloadBytes / (1024 * 1024);
                            float networkUploadMB = networkUploadBytes / (1024 * 1024);
                            float networkDownloadKB = networkDownloadBytes / 1024;
                            float networkUploadKB = networkUploadBytes / 1024;

                            // Update totals only once per check period and halve their value
                            totalDownloadMB -= networkDownloadMB / 2; // Halve the value
                            totalUploadMB -= networkUploadMB / 2;     // Halve the value

                            // Calculate new total MB from server and downloads/uploads
                            float newTotalMB = totalMBFromServer + totalDownloadMB + totalUploadMB;

                            // Determine maxValue based on maxdownloadMBFromServer
                            int maxValue = (int)Math.Round(maxdownloadMBFromServer);

                            // Calculate progress bar value ensuring it remains within bounds
                            int progressBarValue = (int)Math.Round(newTotalMB);
                            progressBarValue = Math.Max(0, Math.Min(progressBarValue, maxValue));

                            // Calculate percentage relative to maxValue, scaled to 0-100
                            int percentageValue = (maxValue > 0) ? (int)((progressBarValue / (float)maxValue) * 100) : 0;

                            // Ensure progressBarValue is within the bounds of the progress bar maximum
                            // int progressBarValue1 = Clamp((int)((progressBarValue / (float)maxValue) * 100), 0, guna2ProgressBar1.Maximum);

                            // Update the UI in a thread-safe manner
                            guna2RadialGauge1.Invoke((Action)(() =>
                            {
                                guna2RadialGauge1.Value = percentageValue;
                                guna2TextBox10.Text = $"{progressBarValue} MB";
                                guna2ProgressBar1.Value = (int)newTotalMB;
                            }));

                            // Update download and upload speed labels
                            label2.Invoke((Action)(() =>
                            {
                                label10.Text = $"{networkDownloadKB:0.##} KB";
                            }));

                            label3.Invoke((Action)(() =>
                            {
                                label11.Text = $"{networkUploadKB:0.##} KB";
                            }));

                        }
                        catch (Exception ex)
                        {
                            // Handle exceptions as necessary
                            Console.WriteLine("An error occurred: " + ex.Message);
                        }


                    });

                }

                catch (Exception ex)

                {

                    // Log the exception with detailed information

                    Debug.WriteLine($"Outer error in network usage tracking: {ex.Message}");

                }

                /*
                try
                {

                    // Get current download and upload usage

                    float networkDownloadBytes = downloadCounter.NextValue();

                    float networkUploadBytes = uploadCounter.NextValue();


                    // Calculate MB and KB

                    float networkDownloadMB = networkDownloadBytes / (1024 * 1024);

                    float networkUploadMB = networkUploadBytes / (1024 * 1024);

                    float networkDownloadKB = networkDownloadBytes / 1024;

                    float networkUploadKB = networkUploadBytes / 1024;


                    // Update total download/upload

                    totalDownloadMB += networkDownloadMB;

                    totalUploadMB += networkUploadMB;


                    // Calculate the new progress value from the totals

                    float newTotalMB = totalMBFromServer + totalDownloadMB + totalUploadMB;


                    // Your maximum value for comparison
                    int maxValue = 1000000;

                    // Calculate the value based on the new total in MB
                    int progressBarValue = (int)Math.Round(newTotalMB);

                    // Ensure the value does not exceed the maxValue
                    if (progressBarValue > maxValue)
                    {
                        progressBarValue = maxValue;
                    }

                    // Calculate the percentage relative to maxValue
                    int percentageValue = (int)((progressBarValue / (float)maxValue) * 100);
                    int progressBarValue1 = Clamp((int)Math.Round(newTotalMB), 0, guna2ProgressBar1.Maximum);

                    // Update the progress bar
                    guna2RadialGauge1.Invoke((Action)(() =>
                    {
                        guna2RadialGauge1.Value = percentageValue; // Set the percentage value to the gauge
                        guna2TextBox10.Text = $"{progressBarValue} MB"; // Update the text box
                        guna2ProgressBar1.Value = progressBarValue1;
                    }));



                    // Update UI labels for download and upload speeds

                    label2.Invoke((Action)(() =>
                    {

                        label11.Text = $"{(networkDownloadKB):0.##} KB";

                    }));


                    label3.Invoke((Action)(() =>
                    {

                        label10.Text = $"{(networkUploadKB):0.##} KB";

                    }));
                }

                catch (Exception ex)
                {

                    // Log the exception

                    Debug.WriteLine($"ارور: {ex.Message}");

                }
              */
            }


        }

        private void guna2CircleButton4_MouseEnter(object sender, EventArgs e)
        {

        }

        private void guna2Button4_Click_1(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                guna2Panel1.FillColor = Color.FromArgb(11, 12, 16);
                searchgame.Visible = true;
                mainpanel.Visible = false;
                setting.Visible = false;
                // about.Visible = false;
                games.Visible = true;
            }));
        }
        /*
        private string SendUsernameToServer(string username)
        {
            try
            {
                using (TcpClient client = new TcpClient("robo.roboping.ir", 7050))
                {
                    // Prepare the JSON message
                    var requestData = new
                    {
                        username = username
                    };

                    string jsonRequest = JsonConvert.SerializeObject(requestData);
                    byte[] dataToSend = Encoding.UTF8.GetBytes(jsonRequest);

                    // Send the request
                    NetworkStream stream = client.GetStream();
                    stream.Write(dataToSend, 0, dataToSend.Length);

                    // Receive the response
                    byte[] buffer = new byte[1024];
                    int bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string jsonResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);

                    return jsonResponse;
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show($"An error occurred: {ex.Message} 🛑");

                Console.WriteLine($"ارور: {ex.Message}");
                return null;
            }
        }
        
        */
        private void guna2Button3_Click(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                guna2Panel1.FillColor = Color.Transparent;
                searchgame.Visible = false;
                mainpanel.Visible = true;
                setting.Visible = false;
                // about.Visible = false;
                games.Visible = false;
            }));

        }

        private void guna2Button1_Click(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                guna2Panel1.FillColor = Color.FromArgb(11, 12, 16);
                searchgame.Visible = false;
                mainpanel.Visible = false;
                setting.Visible = false;
                // about.Visible = true;
                games.Visible = false;
            }));

        }

        private void mainpanel_Paint(object sender, PaintEventArgs e)
        {

        }

        private void guna2ControlBox1_Click_2(object sender, EventArgs e)
        {
            /*
            if (isSessionActive1 == true)
            {
                SessionStop();
            }

            Closeroute();

            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

            Environment.Exit(1);
            */
        }

        private void searchgame_TextChanged(object sender, EventArgs e)
        {
            this.Invoke((Action)(() =>
            {
                string searchText = searchgame.Text.Trim().ToLower();

                foreach (Control ctrl in Games.instance.flowLayoutPanel1.Controls)
                {
                    if (ctrl is Guna2Button)
                    {
                        Guna2Button btn = (Guna2Button)ctrl;
                        // Check if the button's name starts with the search text
                        if (btn.Name.ToLower().StartsWith(searchText))
                        {
                            btn.Visible = true;
                        }
                        else
                        {
                            btn.Visible = false;
                        }
                    }
                }
            }));
        }
        private void guna2CircleButton2_Click(object sender, EventArgs e)
        {
            Closeroute();

            if (isSessionActive1 == true)
            {
                SessionStop();
            }

            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");


            Login mainForm1 = new Login();

            this.Hide();

            mainForm1.Show();
        }

        private void label12_MouseEnter(object sender, EventArgs e)
        {
            label12.Text = usernamefirst.Text;
        }

        private void label12_MouseLeave(object sender, EventArgs e)
        {
            label12.Text = "●●●●●●●●●●";
        }

        private void guna2TextBox10_TextChanged(object sender, EventArgs e)
        {

        }

        private void guna2CirclePictureBox7_Click(object sender, EventArgs e)
        {
            string url = "https://roboping.ir";

            try
            {
                Process.Start(url);
            }
            catch (Exception)
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "صفحه روبوپینگو پیدا نمیکنم";
            }
        }

        private void guna2Button9_CheckedChanged(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute1.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = true;
                    arrow3.Visible = false;
                    arrow4.Visible = false;
                    arrow5.Visible = false;
                }
            }));
        }

        private void guna2Button10_CheckedChanged(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute2.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = false;
                    arrow3.Visible = true;
                    arrow4.Visible = false;
                    arrow5.Visible = false;
                }
            }));
        }

        private void guna2Button11_CheckedChanged(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute3.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = false;
                    arrow3.Visible = false;
                    arrow4.Visible = true;
                    arrow5.Visible = false;
                }
            }));
        }

        private void guna2Button5_CheckedChanged(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute4.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = false;
                    arrow3.Visible = false;
                    arrow4.Visible = false;
                    arrow5.Visible = true;
                }
            }));
        }

        private async void ESOsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {esoroute1} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit


                    }
                    catch (Exception)
                    {

                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                    }
                });
            }
        }
        private async void ESOoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {esoroute1} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit();
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                    }
                });
            }
        }
        private async void ESOu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {esoroute1} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                    }
                });
            }
        }

        private async void ESOtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {esoroute1} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void Conansh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {conanroute1} 255.255.255.255 vpn_gateway --route {conanroute2} 255.255.255.255 vpn_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی کونان بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit

                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;

                            this.Invoke(new Action(async () =>
                            {
                                eror.showdialog();
                                ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                                Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                            }));
                        }));
                    }
                });
            }
        }
        private async void Conanoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {conanroute1} 255.255.255.255 vpn_gateway --route {conanroute2} 255.255.255.255 vpn_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی کونان بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit

                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;

                            this.Invoke(new Action(async () =>
                            {
                                eror.showdialog();
                                ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                                Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                            }));
                        }));
                    }
                });
            }
        }
        private async void Conanu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {conanroute1} 255.255.255.255 vpn_gateway --route {conanroute2} 255.255.255.255 vpn_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی کونان بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit

                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;

                            this.Invoke(new Action(async () =>
                            {
                                eror.showdialog();
                                ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                                Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                            }));
                        }));
                    }
                });
            }
        }
        private async void Conantl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.255.255 net_gateway --route {conanroute1} 255.255.0.0 vpn_gateway --route {conanroute2} 255.255.255.255 vpn_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی کونان بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Squadsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {squad1} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;

                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Squadoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9999"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {squad1} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;

                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Squadu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {squad1} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Squadtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {squad1} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Scumsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {scum1} 255.0.0.0 vpn_gateway --route {scum2} 255.0.0.0 vpn_gateway --route {scum3} 255.0.0.0 vpn_gateway --route {scum4} 255.0.0.0 vpn_gateway --route {scum5} 255.0.0.0 vpn_gateway --route {scum6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Scumoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {scum1} 255.0.0.0 vpn_gateway --route {scum2} 255.0.0.0 vpn_gateway --route {scum3} 255.0.0.0 vpn_gateway --route {scum4} 255.0.0.0 vpn_gateway --route {scum5} 255.0.0.0 vpn_gateway --route {scum6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Scumu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {scum1} 255.0.0.0 vpn_gateway --route {scum2} 255.0.0.0 vpn_gateway --route {scum3} 255.0.0.0 vpn_gateway --route {scum4} 255.0.0.0 vpn_gateway --route {scum5} 255.0.0.0 vpn_gateway --route {scum6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void Scumtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {scum1} 255.0.0.0 vpn_gateway --route {scum2} 255.0.0.0 vpn_gateway --route {scum3} 255.0.0.0 vpn_gateway --route {scum4} 255.0.0.0 vpn_gateway --route {scum5} 255.0.0.0 vpn_gateway --route {scum6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void chivsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {chiv1} 255.255.255.255 vpn_gateway --route {chiv2} 255.0.0.0 vpn_gateway --route {chiv3} 255.0.0.0 vpn_gateway --route {chiv4} 255.255.0.0 vpn_gateway --route {chiv5} 255.255.255.255 vpn_gateway --route {chiv6} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void chivoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {chiv1} 255.255.255.255 vpn_gateway --route {chiv2} 255.0.0.0 vpn_gateway --route {chiv3} 255.0.0.0 vpn_gateway --route {chiv4} 255.255.0.0 vpn_gateway --route {chiv5} 255.255.255.255 vpn_gateway --route {chiv6} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void chivu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {chiv1} 255.255.255.255 vpn_gateway --route {chiv2} 255.0.0.0 vpn_gateway --route {chiv3} 255.0.0.0 vpn_gateway --route {chiv4} 255.255.0.0 vpn_gateway --route {chiv5} 255.255.255.255 vpn_gateway --route {chiv6} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void chivtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {chiv1} 255.255.255.255 vpn_gateway --route {chiv2} 255.0.0.0 vpn_gateway --route {chiv3} 255.0.0.0 vpn_gateway --route {chiv4} 255.255.0.0 vpn_gateway --route {chiv5} 255.255.255.255 vpn_gateway --route {chiv6} 255.255.255.255 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forhonorsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {forhonor1} 255.0.0.0 vpn_gateway --route {forhonor2} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");


                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forhonoroh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {forhonor1} 255.0.0.0 vpn_gateway --route {forhonor2} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forhonoru()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {forhonor1} 255.0.0.0 vpn_gateway --route {forhonor2} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forhonortl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {forhonor1} 255.0.0.0 vpn_gateway --route {forhonor2} 255.0.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                    }
                });
            }
        }
        private async void r6sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {r61} 255.255.0.0 vpn_gateway --route {r62} 255.255.0.0 vpn_gateway --route {r63} 255.255.0.0 vpn_gateway --route {r64} 255.255.0.0 vpn_gateway --route {r65} 255.0.0.0 vpn_gateway --route {r66} 255.255.0.0 vpn_gateway --route {r67} 255.255.0.0 vpn_gateway --route {r68} 255.255.0.0 vpn_gateway --route {r69} 255.255.0.0 vpn_gateway --route {r610} 255.255.0.0 vpn_gateway --route {r611} 255.255.0.0 vpn_gateway --route {r612} 255.255.0.0 vpn_gateway --route {r613} 255.255.0.0 vpn_gateway --route {r614} 255.255.0.0 vpn_gateway --route {r615} 255.255.0.0 vpn_gateway --route {r616} 255.255.0.0 vpn_gateway --route {r617} 255.255.0.0 vpn_gateway --route {r618} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");


                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void r6oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {r61} 255.255.0.0 vpn_gateway --route {r62} 255.255.0.0 vpn_gateway --route {r63} 255.255.0.0 vpn_gateway --route {r64} 255.255.0.0 vpn_gateway --route {r65} 255.0.0.0 vpn_gateway --route {r66} 255.255.0.0 vpn_gateway --route {r67} 255.255.0.0 vpn_gateway --route {r68} 255.255.0.0 vpn_gateway --route {r69} 255.255.0.0 vpn_gateway --route {r610} 255.255.0.0 vpn_gateway --route {r611} 255.255.0.0 vpn_gateway --route {r612} 255.255.0.0 vpn_gateway --route {r613} 255.255.0.0 vpn_gateway --route {r614} 255.255.0.0 vpn_gateway --route {r615} 255.255.0.0 vpn_gateway --route {r616} 255.255.0.0 vpn_gateway --route {r617} 255.255.0.0 vpn_gateway --route {r618} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void r6u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {r61} 255.255.0.0 vpn_gateway --route {r62} 255.255.0.0 vpn_gateway --route {r63} 255.255.0.0 vpn_gateway --route {r64} 255.255.0.0 vpn_gateway --route {r65} 255.0.0.0 vpn_gateway --route {r66} 255.255.0.0 vpn_gateway --route {r67} 255.255.0.0 vpn_gateway --route {r68} 255.255.0.0 vpn_gateway --route {r69} 255.255.0.0 vpn_gateway --route {r610} 255.255.0.0 vpn_gateway --route {r611} 255.255.0.0 vpn_gateway --route {r612} 255.255.0.0 vpn_gateway --route {r613} 255.255.0.0 vpn_gateway --route {r614} 255.255.0.0 vpn_gateway --route {r615} 255.255.0.0 vpn_gateway --route {r616} 255.255.0.0 vpn_gateway --route {r617} 255.255.0.0 vpn_gateway --route {r618} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void r6tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {r61} 255.255.0.0 vpn_gateway --route {r62} 255.255.0.0 vpn_gateway --route {r63} 255.255.0.0 vpn_gateway --route {r64} 255.255.0.0 vpn_gateway --route {r65} 255.0.0.0 vpn_gateway --route {r66} 255.255.0.0 vpn_gateway --route {r67} 255.255.0.0 vpn_gateway --route {r68} 255.255.0.0 vpn_gateway --route {r69} 255.255.0.0 vpn_gateway --route {r610} 255.255.0.0 vpn_gateway --route {r611} 255.255.0.0 vpn_gateway --route {r612} 255.255.0.0 vpn_gateway --route {r613} 255.255.0.0 vpn_gateway --route {r614} 255.255.0.0 vpn_gateway --route {r615} 255.255.0.0 vpn_gateway --route {r616} 255.255.0.0 vpn_gateway --route {r617} 255.255.0.0 vpn_gateway --route {r618} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cs2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {cs21} 255.255.0.0 vpn_gateway --route {cs22} 255.255.0.0 vpn_gateway --route {cs23} 255.255.0.0 vpn_gateway --route {cs24} 255.255.0.0 vpn_gateway --route {cs25} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cs2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {cs21} 255.255.0.0 vpn_gateway --route {cs22} 255.255.0.0 vpn_gateway --route {cs23} 255.255.0.0 vpn_gateway --route {cs24} 255.255.0.0 vpn_gateway --route {cs25} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cs2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {cs21} 255.255.0.0 vpn_gateway --route {cs22} 255.255.0.0 vpn_gateway --route {cs23} 255.255.0.0 vpn_gateway --route {cs24} 255.255.0.0 vpn_gateway --route {cs25} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cs2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {cs21} 255.255.0.0 vpn_gateway --route {cs22} 255.255.0.0 vpn_gateway --route {cs23} 255.255.0.0 vpn_gateway --route {cs24} 255.255.0.0 vpn_gateway --route {cs25} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void huntsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {hunt} 255.255.0.0 vpn_gateway --route {hunt2} 255.255.0.0 vpn_gateway --route {hunt3} 255.255.0.0 vpn_gateway --route {hunt4} 255.255.0.0 vpn_gateway --route {hunt5} 255.255.0.0 vpn_gateway --route {hunt6} 255.255.0.0 vpn_gateway --route {hunt7} 255.255.0.0 vpn_gateway --route {hunt8} 255.0.0.0 vpn_gateway --route {hunt9} 255.0.0.0 vpn_gateway --route {hunt10} 255.0.0.0 vpn_gateway --route {hunt11} 255.0.0.0 vpn_gateway --route {hunt12} 255.0.0.0 vpn_gateway --route {hunt13} 255.0.0.0 vpn_gateway --route {hunt14} 255.0.0.0 vpn_gateway --route {hunt15} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");


                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void huntoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {hunt} 255.255.0.0 vpn_gateway --route {hunt2} 255.255.0.0 vpn_gateway --route {hunt3} 255.255.0.0 vpn_gateway --route {hunt4} 255.255.0.0 vpn_gateway --route {hunt5} 255.255.0.0 vpn_gateway --route {hunt6} 255.255.0.0 vpn_gateway --route {hunt7} 255.255.0.0 vpn_gateway --route {hunt8} 255.0.0.0 vpn_gateway --route {hunt9} 255.0.0.0 vpn_gateway --route {hunt10} 255.0.0.0 vpn_gateway --route {hunt11} 255.0.0.0 vpn_gateway --route {hunt12} 255.0.0.0 vpn_gateway --route {hunt13} 255.0.0.0 vpn_gateway --route {hunt14} 255.0.0.0 vpn_gateway --route {hunt15} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void huntu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {hunt} 255.255.0.0 vpn_gateway --route {hunt2} 255.255.0.0 vpn_gateway --route {hunt3} 255.255.0.0 vpn_gateway --route {hunt4} 255.255.0.0 vpn_gateway --route {hunt5} 255.255.0.0 vpn_gateway --route {hunt6} 255.255.0.0 vpn_gateway --route {hunt7} 255.255.0.0 vpn_gateway --route {hunt8} 255.0.0.0 vpn_gateway --route {hunt9} 255.0.0.0 vpn_gateway --route {hunt10} 255.0.0.0 vpn_gateway --route {hunt11} 255.0.0.0 vpn_gateway --route {hunt12} 255.0.0.0 vpn_gateway --route {hunt13} 255.0.0.0 vpn_gateway --route {hunt14} 255.0.0.0 vpn_gateway --route {hunt15} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void hunttl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {hunt} 255.255.0.0 vpn_gateway --route {hunt2} 255.255.0.0 vpn_gateway --route {hunt3} 255.255.0.0 vpn_gateway --route {hunt4} 255.255.0.0 vpn_gateway --route {hunt5} 255.255.0.0 vpn_gateway --route {hunt6} 255.255.0.0 vpn_gateway --route {hunt7} 255.255.0.0 vpn_gateway --route {hunt8} 255.0.0.0 vpn_gateway --route {hunt9} 255.0.0.0 vpn_gateway --route {hunt10} 255.0.0.0 vpn_gateway --route {hunt11} 255.0.0.0 vpn_gateway --route {hunt12} 255.0.0.0 vpn_gateway --route {hunt13} 255.0.0.0 vpn_gateway --route {hunt14} 255.0.0.0 vpn_gateway --route {hunt15} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void discsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void discoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void discu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void disctl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf4sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf41} 255.255.0.0 vpn_gateway --route {bf42} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf4oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf41} 255.255.0.0 vpn_gateway --route {bf42} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf4u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf41} 255.255.0.0 vpn_gateway --route {bf42} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf4tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf41} 255.255.0.0 vpn_gateway --route {bf42} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void apexsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {apex} 255.255.0.0 vpn_gateway --route {apex2} 255.255.0.0 vpn_gateway --route {apex3} 255.255.0.0 vpn_gateway --route {apex4} 255.255.0.0 vpn_gateway --route {apex5} 255.255.0.0 vpn_gateway --route {apex6} 255.255.0.0 vpn_gateway --route {apex7} 255.255.0.0 vpn_gateway --route {apex8} 255.255.0.0 vpn_gateway --route {apex9} 255.255.0.0 vpn_gateway --route {apex10} 255.255.0.0 vpn_gateway --route {apex11} 255.255.0.0 vpn_gateway --route {apex12} 255.255.0.0 vpn_gateway --route {apex13} 255.255.0.0 vpn_gateway --route {apex14} 255.255.0.0 vpn_gateway --route {apex15} 255.0.0.0 vpn_gateway --route {apex16} 255.255.255.0 vpn_gateway --route {apex17} 255.255.0.0 vpn_gateway --route {apex18} 255.255.0.0 vpn_gateway --route {apex19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void apexoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {apex} 255.255.0.0 vpn_gateway --route {apex2} 255.255.0.0 vpn_gateway --route {apex3} 255.255.0.0 vpn_gateway --route {apex4} 255.255.0.0 vpn_gateway --route {apex5} 255.255.0.0 vpn_gateway --route {apex6} 255.255.0.0 vpn_gateway --route {apex7} 255.255.0.0 vpn_gateway --route {apex8} 255.255.0.0 vpn_gateway --route {apex9} 255.255.0.0 vpn_gateway --route {apex10} 255.255.0.0 vpn_gateway --route {apex11} 255.255.0.0 vpn_gateway --route {apex12} 255.255.0.0 vpn_gateway --route {apex13} 255.255.0.0 vpn_gateway --route {apex14} 255.255.0.0 vpn_gateway --route {apex15} 255.0.0.0 vpn_gateway --route {apex16} 255.255.255.0 vpn_gateway --route {apex17} 255.255.0.0 vpn_gateway --route {apex18} 255.255.0.0 vpn_gateway --route {apex19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void apexu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {apex} 255.255.0.0 vpn_gateway --route {apex2} 255.255.0.0 vpn_gateway --route {apex3} 255.255.0.0 vpn_gateway --route {apex4} 255.255.0.0 vpn_gateway --route {apex5} 255.255.0.0 vpn_gateway --route {apex6} 255.255.0.0 vpn_gateway --route {apex7} 255.255.0.0 vpn_gateway --route {apex8} 255.255.0.0 vpn_gateway --route {apex9} 255.255.0.0 vpn_gateway --route {apex10} 255.255.0.0 vpn_gateway --route {apex11} 255.255.0.0 vpn_gateway --route {apex12} 255.255.0.0 vpn_gateway --route {apex13} 255.255.0.0 vpn_gateway --route {apex14} 255.255.0.0 vpn_gateway --route {apex15} 255.0.0.0 vpn_gateway --route {apex16} 255.255.255.0 vpn_gateway --route {apex17} 255.255.0.0 vpn_gateway --route {apex18} 255.255.0.0 vpn_gateway --route {apex19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void apextl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {apex} 255.255.0.0 vpn_gateway --route {apex2} 255.255.0.0 vpn_gateway --route {apex3} 255.255.0.0 vpn_gateway --route {apex4} 255.255.0.0 vpn_gateway --route {apex5} 255.255.0.0 vpn_gateway --route {apex6} 255.255.0.0 vpn_gateway --route {apex7} 255.255.0.0 vpn_gateway --route {apex8} 255.255.0.0 vpn_gateway --route {apex9} 255.255.0.0 vpn_gateway --route {apex10} 255.255.0.0 vpn_gateway --route {apex11} 255.255.0.0 vpn_gateway --route {apex12} 255.255.0.0 vpn_gateway --route {apex13} 255.255.0.0 vpn_gateway --route {apex14} 255.255.0.0 vpn_gateway --route {apex15} 255.0.0.0 vpn_gateway --route {apex16} 255.255.255.0 vpn_gateway --route {apex17} 255.255.0.0 vpn_gateway --route {apex18} 255.255.0.0 vpn_gateway --route {apex19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xdefsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {xdef1} 255.0.0.0 vpn_gateway --route {xdef2} 255.0.0.0 vpn_gateway --route {xdef3} 255.0.0.0 vpn_gateway --route {xdef4} 255.0.0.0 vpn_gateway --route {xdef5} 255.0.0.0 vpn_gateway --route {xdef6} 255.0.0.0 vpn_gateway --route {xdef7} 255.0.0.0 vpn_gateway --route {xdef8} 255.255.0.0 vpn_gateway --route {xdef9} 255.0.0.0 vpn_gateway --route {xdef10} 255.0.0.0 vpn_gateway --route {xdef11} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xdefoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {xdef1} 255.0.0.0 vpn_gateway --route {xdef2} 255.0.0.0 vpn_gateway --route {xdef3} 255.0.0.0 vpn_gateway --route {xdef4} 255.0.0.0 vpn_gateway --route {xdef5} 255.0.0.0 vpn_gateway --route {xdef6} 255.0.0.0 vpn_gateway --route {xdef7} 255.0.0.0 vpn_gateway --route {xdef8} 255.255.0.0 vpn_gateway --route {xdef9} 255.0.0.0 vpn_gateway --route {xdef10} 255.0.0.0 vpn_gateway --route {xdef11} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xdefu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {xdef1} 255.0.0.0 vpn_gateway --route {xdef2} 255.0.0.0 vpn_gateway --route {xdef3} 255.0.0.0 vpn_gateway --route {xdef4} 255.0.0.0 vpn_gateway --route {xdef5} 255.0.0.0 vpn_gateway --route {xdef6} 255.0.0.0 vpn_gateway --route {xdef7} 255.0.0.0 vpn_gateway --route {xdef8} 255.255.0.0 vpn_gateway --route {xdef9} 255.0.0.0 vpn_gateway --route {xdef10} 255.0.0.0 vpn_gateway --route {xdef11} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xdeftl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {xdef1} 255.0.0.0 vpn_gateway --route {xdef2} 255.0.0.0 vpn_gateway --route {xdef3} 255.0.0.0 vpn_gateway --route {xdef4} 255.0.0.0 vpn_gateway --route {xdef5} 255.0.0.0 vpn_gateway --route {xdef6} 255.0.0.0 vpn_gateway --route {xdef7} 255.0.0.0 vpn_gateway --route {xdef8} 255.255.0.0 vpn_gateway --route {xdef9} 255.0.0.0 vpn_gateway --route {xdef10} 255.0.0.0 vpn_gateway --route {xdef11} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void LOLsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {LOL} 255.255.0.0 vpn_gateway --route {LOL2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void LOLoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {LOL} 255.255.0.0 vpn_gateway --route {LOL2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void LOLu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {LOL} 255.255.0.0 vpn_gateway --route {LOL2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void LOLtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {LOL} 255.255.0.0 vpn_gateway --route {LOL2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void valsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void valoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void valu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void valtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {riot} 255.255.0.0 vpn_gateway --route {riot2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rdr2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rdr21} 255.255.0.0 vpn_gateway --route {rdr22} 255.255.0.0 vpn_gateway --route {rdr23} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rdr2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rdr21} 255.255.0.0 vpn_gateway --route {rdr22} 255.255.0.0 vpn_gateway --route {rdr23} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rdr2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rdr21} 255.255.0.0 vpn_gateway --route {rdr22} 255.255.0.0 vpn_gateway --route {rdr23} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rdr2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {rdr21} 255.255.0.0 vpn_gateway --route {rdr22} 255.255.0.0 vpn_gateway --route {rdr23} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void gtavsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 vpn_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.0.0 net_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void gtavoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 vpn_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.0.0 net_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void gtavu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 vpn_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.0.0 net_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void gtavtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 vpn_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.0.0 net_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mvssh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mvs1} 255.0.0.0 vpn_gateway --route {mvs2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mvsoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mvs1} 255.0.0.0 vpn_gateway --route {mvs2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mvsu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mvs1} 255.0.0.0 vpn_gateway --route {mvs2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mvstl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {mvs1} 255.0.0.0 vpn_gateway --route {mvs2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void seash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {sea1} 255.0.0.0 vpn_gateway --route {sea2} 255.0.0.0 vpn_gateway --route {sea3} 255.0.0.0 vpn_gateway --route {sea4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void seaoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {sea1} 255.0.0.0 vpn_gateway --route {sea2} 255.0.0.0 vpn_gateway --route {sea3} 255.0.0.0 vpn_gateway --route {sea4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void seau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {sea1} 255.0.0.0 vpn_gateway --route {sea2} 255.0.0.0 vpn_gateway --route {sea3} 255.0.0.0 vpn_gateway --route {sea4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void seatl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {sea1} 255.0.0.0 vpn_gateway --route {sea2} 255.0.0.0 vpn_gateway --route {sea3} 255.0.0.0 vpn_gateway --route {sea4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void epicsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {hellletloose} 255.255.0.0 vpn_gateway --route {hellletloose2} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void epicoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {hellletloose} 255.255.0.0 vpn_gateway --route {hellletloose2} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void epicu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {hellletloose} 255.255.0.0 vpn_gateway --route {hellletloose2} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void epictl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {hellletloose} 255.255.0.0 vpn_gateway --route {hellletloose2} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pubgsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pubg} 255.255.0.0 vpn_gateway --route {pubg2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pubgoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pubg} 255.255.0.0 vpn_gateway --route {pubg2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pubgu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pubg} 255.255.0.0 vpn_gateway --route {pubg2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pubgtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {pubg} 255.255.0.0 vpn_gateway --route {pubg2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void eash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat2} 255.0.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void eaoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat2} 255.0.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void eau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat2} 255.0.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void eatl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {eaanticheat} 255.255.0.0 vpn_gateway --route {eaanticheat2} 255.0.0.0 vpn_gateway --route {eaanticheat3} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dayzsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {dayz} 255.255.255.255 vpn_gateway --route {dayz2} 255.255.255.255 vpn_gateway --route {dayz4} 255.255.0.0 vpn_gateway --route {dayz5} 255.255.0.0 vpn_gateway --route {dayz6} 255.255.0.0 vpn_gateway --route {dayz7} 255.255.255.255 vpn_gateway --route {dayz8} 255.255.255.255 vpn_gateway --route {dayz3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dayzoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {dayz} 255.255.255.255 vpn_gateway --route {dayz2} 255.255.255.255 vpn_gateway --route {dayz4} 255.255.0.0 vpn_gateway --route {dayz5} 255.255.0.0 vpn_gateway --route {dayz6} 255.255.0.0 vpn_gateway --route {dayz7} 255.255.255.255 vpn_gateway --route {dayz8} 255.255.255.255 vpn_gateway --route {dayz3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dayzu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {dayz} 255.255.255.255 vpn_gateway --route {dayz2} 255.255.255.255 vpn_gateway --route {dayz4} 255.255.0.0 vpn_gateway --route {dayz5} 255.255.0.0 vpn_gateway --route {dayz6} 255.255.0.0 vpn_gateway --route {dayz7} 255.255.255.255 vpn_gateway --route {dayz8} 255.255.255.255 vpn_gateway --route {dayz3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dayztl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {dayz} 255.255.255.255 vpn_gateway --route {dayz2} 255.255.255.255 vpn_gateway --route {dayz4} 255.255.0.0 vpn_gateway --route {dayz5} 255.255.0.0 vpn_gateway --route {dayz6} 255.255.0.0 vpn_gateway --route {dayz7} 255.255.255.255 vpn_gateway --route {dayz8} 255.255.255.255 vpn_gateway --route {dayz3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید بازی بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void finalssh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {final} 255.0.0.0 vpn_gateway --route {final2} 255.0.0.0 vpn_gateway --route {final3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void finalsoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {final} 255.0.0.0 vpn_gateway --route {final2} 255.0.0.0 vpn_gateway --route {final3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void finalsu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {final} 255.0.0.0 vpn_gateway --route {final2} 255.0.0.0 vpn_gateway --route {final3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void finaltl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {final} 255.0.0.0 vpn_gateway --route {final2} 255.0.0.0 vpn_gateway --route {final3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fivemsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fivem} 255.0.0.0 vpn_gateway --route {fivem2} 255.0.0.0 vpn_gateway --route {fivem3} 255.255.0.0 vpn_gateway --route {fivem4} 255.0.0.0 vpn_gateway --route {fivem5} 255.255.0.0 vpn_gateway --route {fivem6} 255.255.0.0 vpn_gateway --route {fivem7} 255.255.0.0 vpn_gateway --route {fivem8} 255.255.0.0 vpn_gateway --route {fivem9} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem12} 255.255.0.0 vpn_gateway --route {fivem13} 255.255.0.0 vpn_gateway --route {fivem14} 255.255.0.0 vpn_gateway --route {fivem15} 255.255.0.0 vpn_gateway --route {fivem16} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                        gameinfo.Text = "توجه کنید نرم افزار فایوم بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fivemoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fivem} 255.0.0.0 vpn_gateway --route {fivem2} 255.0.0.0 vpn_gateway --route {fivem3} 255.255.0.0 vpn_gateway --route {fivem4} 255.0.0.0 vpn_gateway --route {fivem5} 255.255.0.0 vpn_gateway --route {fivem6} 255.255.0.0 vpn_gateway --route {fivem7} 255.255.0.0 vpn_gateway --route {fivem8} 255.255.0.0 vpn_gateway --route {fivem9} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem12} 255.255.0.0 vpn_gateway --route {fivem13} 255.255.0.0 vpn_gateway --route {fivem14} 255.255.0.0 vpn_gateway --route {fivem15} 255.255.0.0 vpn_gateway --route {fivem16} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                        gameinfo.Text = "توجه کنید نرم افزار فایوم بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fivemu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fivem} 255.0.0.0 vpn_gateway --route {fivem2} 255.0.0.0 vpn_gateway --route {fivem3} 255.255.0.0 vpn_gateway --route {fivem4} 255.0.0.0 vpn_gateway --route {fivem5} 255.255.0.0 vpn_gateway --route {fivem6} 255.255.0.0 vpn_gateway --route {fivem7} 255.255.0.0 vpn_gateway --route {fivem8} 255.255.0.0 vpn_gateway --route {fivem9} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem12} 255.255.0.0 vpn_gateway --route {fivem13} 255.255.0.0 vpn_gateway --route {fivem14} 255.255.0.0 vpn_gateway --route {fivem15} 255.255.0.0 vpn_gateway --route {fivem16} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                        gameinfo.Text = "توجه کنید نرم افزار فایوم بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fivemtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {fivem} 255.0.0.0 vpn_gateway --route {fivem2} 255.0.0.0 vpn_gateway --route {fivem3} 255.255.0.0 vpn_gateway --route {fivem4} 255.0.0.0 vpn_gateway --route {fivem5} 255.255.0.0 vpn_gateway --route {fivem6} 255.255.0.0 vpn_gateway --route {fivem7} 255.255.0.0 vpn_gateway --route {fivem8} 255.255.0.0 vpn_gateway --route {fivem9} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem10} 255.255.0.0 vpn_gateway --route {fivem12} 255.255.0.0 vpn_gateway --route {fivem13} 255.255.0.0 vpn_gateway --route {fivem14} 255.255.0.0 vpn_gateway --route {fivem15} 255.255.0.0 vpn_gateway --route {fivem16} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                        gameinfo.Text = "توجه کنید نرم افزار فایوم بسته به درخواست یوزر ها سرور ها به این بازی اضافه میشود پس اگر سرور شما تو لیست نیست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void ragesh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rageoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rageu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void ragetl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void narakash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {naraka1} 255.0.0.0 vpn_gateway --route {naraka2} 255.0.0.0 vpn_gateway --route {naraka3} 255.0.0.0 vpn_gateway --route {naraka4} 255.0.0.0 vpn_gateway --route {naraka5} 255.0.0.0 vpn_gateway --route {naraka6} 255.0.0.0 vpn_gateway --route {naraka7} 255.0.0.0 vpn_gateway --route {naraka8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void narakaoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {naraka1} 255.0.0.0 vpn_gateway --route {naraka2} 255.0.0.0 vpn_gateway --route {naraka3} 255.0.0.0 vpn_gateway --route {naraka4} 255.0.0.0 vpn_gateway --route {naraka5} 255.0.0.0 vpn_gateway --route {naraka6} 255.0.0.0 vpn_gateway --route {naraka7} 255.0.0.0 vpn_gateway --route {naraka8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void narakau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {naraka1} 255.0.0.0 vpn_gateway --route {naraka2} 255.0.0.0 vpn_gateway --route {naraka3} 255.0.0.0 vpn_gateway --route {naraka4} 255.0.0.0 vpn_gateway --route {naraka5} 255.0.0.0 vpn_gateway --route {naraka6} 255.0.0.0 vpn_gateway --route {naraka7} 255.0.0.0 vpn_gateway --route {naraka8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void narakatl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {naraka1} 255.0.0.0 vpn_gateway --route {naraka2} 255.0.0.0 vpn_gateway --route {naraka3} 255.0.0.0 vpn_gateway --route {naraka4} 255.0.0.0 vpn_gateway --route {naraka5} 255.0.0.0 vpn_gateway --route {naraka6} 255.0.0.0 vpn_gateway --route {naraka7} 255.0.0.0 vpn_gateway --route {naraka8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fortnitesh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {fortnite2} 255.0.0.0 vpn_gateway --route {fortnite3} 255.0.0.0 vpn_gateway --route {fortnite4} 255.0.0.0 vpn_gateway --route {fortnite5} 255.0.0.0 vpn_gateway --route {fortnite6} 255.0.0.0 vpn_gateway --route {fortnite7} 255.0.0.0 vpn_gateway --route {fortnite8} 255.0.0.0 vpn_gateway --route {fortnite9} 255.0.0.0 vpn_gateway --route {fortnite10} 255.0.0.0 vpn_gateway --route {fortnite11} 255.0.0.0 vpn_gateway --route {fortnite12} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fortniteoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {fortnite2} 255.0.0.0 vpn_gateway --route {fortnite3} 255.0.0.0 vpn_gateway --route {fortnite4} 255.0.0.0 vpn_gateway --route {fortnite5} 255.0.0.0 vpn_gateway --route {fortnite6} 255.0.0.0 vpn_gateway --route {fortnite7} 255.0.0.0 vpn_gateway --route {fortnite8} 255.0.0.0 vpn_gateway --route {fortnite9} 255.0.0.0 vpn_gateway --route {fortnite10} 255.0.0.0 vpn_gateway --route {fortnite11} 255.0.0.0 vpn_gateway --route {fortnite12} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fortniteu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {fortnite2} 255.0.0.0 vpn_gateway --route {fortnite3} 255.0.0.0 vpn_gateway --route {fortnite4} 255.0.0.0 vpn_gateway --route {fortnite5} 255.0.0.0 vpn_gateway --route {fortnite6} 255.0.0.0 vpn_gateway --route {fortnite7} 255.0.0.0 vpn_gateway --route {fortnite8} 255.0.0.0 vpn_gateway --route {fortnite9} 255.0.0.0 vpn_gateway --route {fortnite10} 255.0.0.0 vpn_gateway --route {fortnite11} 255.0.0.0 vpn_gateway --route {fortnite12} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fortnitetl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {fortnite2} 255.0.0.0 vpn_gateway --route {fortnite3} 255.0.0.0 vpn_gateway --route {fortnite4} 255.0.0.0 vpn_gateway --route {fortnite5} 255.0.0.0 vpn_gateway --route {fortnite6} 255.0.0.0 vpn_gateway --route {fortnite7} 255.0.0.0 vpn_gateway --route {fortnite8} 255.0.0.0 vpn_gateway --route {fortnite9} 255.0.0.0 vpn_gateway --route {fortnite10} 255.0.0.0 vpn_gateway --route {fortnite11} 255.0.0.0 vpn_gateway --route {fortnite12} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void oncehumansh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {oncehuman1} 255.0.0.0 vpn_gateway --route {oncehuman2} 255.0.0.0 vpn_gateway --route {oncehuman3} 255.0.0.0 vpn_gateway --route {oncehuman4} 255.0.0.0 vpn_gateway --route {oncehuman5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void oncehumanoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {oncehuman1} 255.0.0.0 vpn_gateway --route {oncehuman2} 255.0.0.0 vpn_gateway --route {oncehuman3} 255.0.0.0 vpn_gateway --route {oncehuman4} 255.0.0.0 vpn_gateway --route {oncehuman5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void oncehumanu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {oncehuman1} 255.0.0.0 vpn_gateway --route {oncehuman2} 255.0.0.0 vpn_gateway --route {oncehuman3} 255.0.0.0 vpn_gateway --route {oncehuman4} 255.0.0.0 vpn_gateway --route {oncehuman5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void oncehumantl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {oncehuman1} 255.0.0.0 vpn_gateway --route {oncehuman2} 255.0.0.0 vpn_gateway --route {oncehuman3} 255.0.0.0 vpn_gateway --route {oncehuman4} 255.0.0.0 vpn_gateway --route {oncehuman5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void faceitsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {faceit1} 255.255.0.0 vpn_gateway --route {faceit2} 255.255.0.0 vpn_gateway --route {faceit3} 255.255.0.0 vpn_gateway --route {faceit4} 255.255.0.0 vpn_gateway --route {faceit5} 255.255.0.0 vpn_gateway --route {faceit6} 255.255.0.0 vpn_gateway --route {faceit7} 255.255.0.0 vpn_gateway --route {faceit8} 255.255.0.0 vpn_gateway --route {faceit9} 255.255.0.0 vpn_gateway --route {faceit10} 255.255.0.0 vpn_gateway --route {faceit11} 255.255.0.0 vpn_gateway --route {faceit12} 255.255.0.0 vpn_gateway --route {faceit13} 255.255.0.0 vpn_gateway --route {faceit14} 255.255.0.0 vpn_gateway --route {faceit15} 255.255.255.0 vpn_gateway --route {faceit16} 255.255.255.0 vpn_gateway --route {faceit17} 255.255.0.0 vpn_gateway --route {faceit18} 255.255.0.0 vpn_gateway --route {faceit19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void faceitoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {faceit1} 255.255.0.0 vpn_gateway --route {faceit2} 255.255.0.0 vpn_gateway --route {faceit3} 255.255.0.0 vpn_gateway --route {faceit4} 255.255.0.0 vpn_gateway --route {faceit5} 255.255.0.0 vpn_gateway --route {faceit6} 255.255.0.0 vpn_gateway --route {faceit7} 255.255.0.0 vpn_gateway --route {faceit8} 255.255.0.0 vpn_gateway --route {faceit9} 255.255.0.0 vpn_gateway --route {faceit10} 255.255.0.0 vpn_gateway --route {faceit11} 255.255.0.0 vpn_gateway --route {faceit12} 255.255.0.0 vpn_gateway --route {faceit13} 255.255.0.0 vpn_gateway --route {faceit14} 255.255.0.0 vpn_gateway --route {faceit15} 255.255.255.0 vpn_gateway --route {faceit16} 255.255.255.0 vpn_gateway --route {faceit17} 255.255.0.0 vpn_gateway --route {faceit18} 255.255.0.0 vpn_gateway --route {faceit19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void faceitu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {faceit1} 255.255.0.0 vpn_gateway --route {faceit2} 255.255.0.0 vpn_gateway --route {faceit3} 255.255.0.0 vpn_gateway --route {faceit4} 255.255.0.0 vpn_gateway --route {faceit5} 255.255.0.0 vpn_gateway --route {faceit6} 255.255.0.0 vpn_gateway --route {faceit7} 255.255.0.0 vpn_gateway --route {faceit8} 255.255.0.0 vpn_gateway --route {faceit9} 255.255.0.0 vpn_gateway --route {faceit10} 255.255.0.0 vpn_gateway --route {faceit11} 255.255.0.0 vpn_gateway --route {faceit12} 255.255.0.0 vpn_gateway --route {faceit13} 255.255.0.0 vpn_gateway --route {faceit14} 255.255.0.0 vpn_gateway --route {faceit15} 255.255.255.0 vpn_gateway --route {faceit16} 255.255.255.0 vpn_gateway --route {faceit17} 255.255.0.0 vpn_gateway --route {faceit18} 255.255.0.0 vpn_gateway --route {faceit19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void faceittl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {faceit1} 255.255.0.0 vpn_gateway --route {faceit2} 255.255.0.0 vpn_gateway --route {faceit3} 255.255.0.0 vpn_gateway --route {faceit4} 255.255.0.0 vpn_gateway --route {faceit5} 255.255.0.0 vpn_gateway --route {faceit6} 255.255.0.0 vpn_gateway --route {faceit7} 255.255.0.0 vpn_gateway --route {faceit8} 255.255.0.0 vpn_gateway --route {faceit9} 255.255.0.0 vpn_gateway --route {faceit10} 255.255.0.0 vpn_gateway --route {faceit11} 255.255.0.0 vpn_gateway --route {faceit12} 255.255.0.0 vpn_gateway --route {faceit13} 255.255.0.0 vpn_gateway --route {faceit14} 255.255.0.0 vpn_gateway --route {faceit15} 255.255.255.0 vpn_gateway --route {faceit16} 255.255.255.0 vpn_gateway --route {faceit17} 255.255.0.0 vpn_gateway --route {faceit18} 255.255.0.0 vpn_gateway --route {faceit19} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf2042sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {eaanticheat} 255.0.0.0 vpn_gateway --route {eaanticheat2} 255.255.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf2042} 255.255.255.0 vpn_gateway --route {bf20422} 255.0.0.0 vpn_gateway --route {bf20423} 255.0.0.0 vpn_gateway --route {bf20424} 255.0.0.0 vpn_gateway --route {bf20425} 255.255.0.0 vpn_gateway --route {bf20426} 255.0.0.0 vpn_gateway --route {bf20427} 255.0.0.0 vpn_gateway --route {bf20428} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf2042oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {eaanticheat} 255.0.0.0 vpn_gateway --route {eaanticheat2} 255.255.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf2042} 255.255.255.0 vpn_gateway --route {bf20422} 255.0.0.0 vpn_gateway --route {bf20423} 255.0.0.0 vpn_gateway --route {bf20424} 255.0.0.0 vpn_gateway --route {bf20425} 255.255.0.0 vpn_gateway --route {bf20426} 255.0.0.0 vpn_gateway --route {bf20427} 255.0.0.0 vpn_gateway --route {bf20428} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf2042u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {eaanticheat} 255.0.0.0 vpn_gateway --route {eaanticheat2} 255.255.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf2042} 255.255.255.0 vpn_gateway --route {bf20422} 255.0.0.0 vpn_gateway --route {bf20423} 255.0.0.0 vpn_gateway --route {bf20424} 255.0.0.0 vpn_gateway --route {bf20425} 255.255.0.0 vpn_gateway --route {bf20426} 255.0.0.0 vpn_gateway --route {bf20427} 255.0.0.0 vpn_gateway --route {bf20428} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void bf2042tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {eaanticheat} 255.0.0.0 vpn_gateway --route {eaanticheat2} 255.255.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea4} 255.0.0.0 vpn_gateway --route {ea5} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea7} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {bf2042} 255.255.255.0 vpn_gateway --route {bf20422} 255.0.0.0 vpn_gateway --route {bf20423} 255.0.0.0 vpn_gateway --route {bf20424} 255.0.0.0 vpn_gateway --route {bf20425} 255.255.0.0 vpn_gateway --route {bf20426} 255.0.0.0 vpn_gateway --route {bf20427} 255.0.0.0 vpn_gateway --route {bf20428} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void starsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {starcitizen1} 255.255.255.255 vpn_gateway --route {starcitizen2} 255.255.255.255 vpn_gateway --route {starcitizen3} 255.255.255.255 vpn_gateway --route {starcitizen4} 255.255.255.255 vpn_gateway --route {starcitizen5} 255.255.255.255 vpn_gateway --route {starcitizen6} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void staroh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {starcitizen1} 255.255.255.255 vpn_gateway --route {starcitizen2} 255.255.255.255 vpn_gateway --route {starcitizen3} 255.255.255.255 vpn_gateway --route {starcitizen4} 255.255.255.255 vpn_gateway --route {starcitizen5} 255.255.255.255 vpn_gateway --route {starcitizen6} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void staru()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {starcitizen1} 255.255.255.255 vpn_gateway --route {starcitizen2} 255.255.255.255 vpn_gateway --route {starcitizen3} 255.255.255.255 vpn_gateway --route {starcitizen4} 255.255.255.255 vpn_gateway --route {starcitizen5} 255.255.255.255 vpn_gateway --route {starcitizen6} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void startl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {starcitizen1} 255.255.255.255 vpn_gateway --route {starcitizen2} 255.255.255.255 vpn_gateway --route {starcitizen3} 255.255.255.255 vpn_gateway --route {starcitizen4} 255.255.255.255 vpn_gateway --route {starcitizen5} 255.255.255.255 vpn_gateway --route {starcitizen6} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void shadowraidsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {raidshadow1} 255.0.0.0 vpn_gateway --route {raidshadow2} 255.255.0.0 vpn_gateway vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void shadowraidoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {raidshadow1} 255.0.0.0 vpn_gateway --route {raidshadow2} 255.255.0.0 vpn_gateway vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void shadowraidu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {raidshadow1} 255.0.0.0 vpn_gateway --route {raidshadow2} 255.255.0.0 vpn_gateway vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void shadowraidtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {raidshadow1} 255.0.0.0 vpn_gateway --route {raidshadow2} 255.255.0.0 vpn_gateway vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void newworldsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {newworld6} 255.255.0.0 vpn_gateway --route {newworld5} 255.0.0.0 vpn_gateway --route {newworld1} 255.255.0.0 vpn_gateway --route {newworld2} 255.0.0.0 vpn_gateway --route {newworld3} 255.0.0.0 vpn_gateway --route {newworld4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void newworldoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {newworld6} 255.255.0.0 vpn_gateway --route {newworld5} 255.0.0.0 vpn_gateway --route {newworld1} 255.255.0.0 vpn_gateway --route {newworld2} 255.0.0.0 vpn_gateway --route {newworld3} 255.0.0.0 vpn_gateway --route {newworld4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void newworldu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {newworld6} 255.255.0.0 vpn_gateway --route {newworld5} 255.0.0.0 vpn_gateway --route {newworld1} 255.255.0.0 vpn_gateway --route {newworld2} 255.0.0.0 vpn_gateway --route {newworld3} 255.0.0.0 vpn_gateway --route {newworld4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void newworldtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {newworld6} 255.255.0.0 vpn_gateway --route {newworld5} 255.0.0.0 vpn_gateway --route {newworld1} 255.255.0.0 vpn_gateway --route {newworld2} 255.0.0.0 vpn_gateway --route {newworld3} 255.0.0.0 vpn_gateway --route {newworld4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void arenabreakoutsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {arenabreakout8} 255.0.0.0 vpn_gateway --route {arenabreakout9} 255.0.0.0 vpn_gateway --route {arenabreakout10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void arenabreakoutoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {arenabreakout8} 255.0.0.0 vpn_gateway --route {arenabreakout9} 255.0.0.0 vpn_gateway --route {arenabreakout10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void arenabreakoutu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {arenabreakout8} 255.0.0.0 vpn_gateway --route {arenabreakout9} 255.0.0.0 vpn_gateway --route {arenabreakout10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void arenabreakouttl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {arenabreakout8} 255.0.0.0 vpn_gateway --route {arenabreakout9} 255.0.0.0 vpn_gateway --route {arenabreakout10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void deltaforcesh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deltaforceoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deltaforceu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deltaforcetl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {arenabreakout} 255.0.0.0 vpn_gateway --route {arenabreakout2} 255.0.0.0 vpn_gateway --route {arenabreakout3} 255.0.0.0 vpn_gateway --route {arenabreakout4} 255.0.0.0 vpn_gateway --route {arenabreakout5} 255.0.0.0 vpn_gateway --route {arenabreakout6} 255.0.0.0 vpn_gateway --route {arenabreakout7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void forza5sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {forza5} 255.0.0.0 vpn_gateway --route {forza52} 255.0.0.0 vpn_gateway --route {forza53} 255.0.0.0 vpn_gateway --route {forza54} 255.0.0.0 vpn_gateway --route {forza55} 255.0.0.0 vpn_gateway --route {forza56} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forza5oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {forza5} 255.0.0.0 vpn_gateway --route {forza52} 255.0.0.0 vpn_gateway --route {forza53} 255.0.0.0 vpn_gateway --route {forza54} 255.0.0.0 vpn_gateway --route {forza55} 255.0.0.0 vpn_gateway --route {forza56} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forza5u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {forza5} 255.0.0.0 vpn_gateway --route {forza52} 255.0.0.0 vpn_gateway --route {forza53} 255.0.0.0 vpn_gateway --route {forza54} 255.0.0.0 vpn_gateway --route {forza55} 255.0.0.0 vpn_gateway --route {forza56} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void forza5tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {forza5} 255.0.0.0 vpn_gateway --route {forza52} 255.0.0.0 vpn_gateway --route {forza53} 255.0.0.0 vpn_gateway --route {forza54} 255.0.0.0 vpn_gateway --route {forza55} 255.0.0.0 vpn_gateway --route {forza56} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void warframesh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {forza5} 255.0.0.0 vpn_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warframeoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {forza5} 255.0.0.0 vpn_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warframeu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {forza5} 255.0.0.0 vpn_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warframetl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {forza5} 255.0.0.0 vpn_gateway --route {fortnite1} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void kohsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {koh} 255.0.0.0 vpn_gateway --route {koh1} 255.0.0.0 vpn_gateway --route {koh2} 255.0.0.0 vpn_gateway --route {koh3} 255.0.0.0 vpn_gateway --route {koh4} 255.0.0.0 vpn_gateway --route {koh5} 255.0.0.0 vpn_gateway --route {koh6} 255.0.0.0 vpn_gateway --route {koh7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void kohoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {koh} 255.0.0.0 vpn_gateway --route {koh1} 255.0.0.0 vpn_gateway --route {koh2} 255.0.0.0 vpn_gateway --route {koh3} 255.0.0.0 vpn_gateway --route {koh4} 255.0.0.0 vpn_gateway --route {koh5} 255.0.0.0 vpn_gateway --route {koh6} 255.0.0.0 vpn_gateway --route {koh7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void kohu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {koh} 255.0.0.0 vpn_gateway --route {koh1} 255.0.0.0 vpn_gateway --route {koh2} 255.0.0.0 vpn_gateway --route {koh3} 255.0.0.0 vpn_gateway --route {koh4} 255.0.0.0 vpn_gateway --route {koh5} 255.0.0.0 vpn_gateway --route {koh6} 255.0.0.0 vpn_gateway --route {koh7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void kohtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {koh} 255.0.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {koh1} 255.0.0.0 vpn_gateway --route {koh2} 255.0.0.0 vpn_gateway --route {koh3} 255.0.0.0 vpn_gateway --route {koh4} 255.0.0.0 vpn_gateway --route {koh5} 255.0.0.0 vpn_gateway --route {koh6} 255.0.0.0 vpn_gateway --route {koh7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void spacesh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {space} 255.0.0.0 vpn_gateway --route {space2} 255.255.0.0 vpn_gateway --route {space3} 255.0.0.0 vpn_gateway --route {space4} 255.255.0.0 vpn_gateway --route {space5} 255.255.0.0 vpn_gateway --route {space6} 255.255.0.0 vpn_gateway --route {space7} 255.0.0.0 vpn_gateway --route {space8} 255.0.0.0 vpn_gateway --route {space9} 255.0.0.0 vpn_gateway --route {space10} 255.0.0.0 vpn_gateway --route {space11} 255.0.0.0 vpn_gateway --route {space12} 255.0.0.0 vpn_gateway --route {space13} 255.0.0.0 vpn_gateway --route {space14} 255.255.0.0 vpn_gateway --route {space15} 255.255.0.0 vpn_gateway --route {space16} 255.255.255.0 vpn_gateway --route {space17} 255.255.0.0 vpn_gateway --route {space18} 255.255.0.0 vpn_gateway --route {space19} 255.255.0.0 vpn_gateway --route {space20} 255.255.0.0 vpn_gateway --route {space21} 255.255.0.0 vpn_gateway --route {space22} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void spaceoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {space} 255.0.0.0 vpn_gateway --route {space2} 255.255.0.0 vpn_gateway --route {space3} 255.0.0.0 vpn_gateway --route {space4} 255.255.0.0 vpn_gateway --route {space5} 255.255.0.0 vpn_gateway --route {space6} 255.255.0.0 vpn_gateway --route {space7} 255.0.0.0 vpn_gateway --route {space8} 255.0.0.0 vpn_gateway --route {space9} 255.0.0.0 vpn_gateway --route {space10} 255.0.0.0 vpn_gateway --route {space11} 255.0.0.0 vpn_gateway --route {space12} 255.0.0.0 vpn_gateway --route {space13} 255.0.0.0 vpn_gateway --route {space14} 255.255.0.0 vpn_gateway --route {space15} 255.255.0.0 vpn_gateway --route {space16} 255.255.255.0 vpn_gateway --route {space17} 255.255.0.0 vpn_gateway --route {space18} 255.255.0.0 vpn_gateway --route {space19} 255.255.0.0 vpn_gateway --route {space20} 255.255.0.0 vpn_gateway --route {space21} 255.255.0.0 vpn_gateway --route {space22} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void spaceu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {space} 255.0.0.0 vpn_gateway --route {space2} 255.255.0.0 vpn_gateway --route {space3} 255.0.0.0 vpn_gateway --route {space4} 255.255.0.0 vpn_gateway --route {space5} 255.255.0.0 vpn_gateway --route {space6} 255.255.0.0 vpn_gateway --route {space7} 255.0.0.0 vpn_gateway --route {space8} 255.0.0.0 vpn_gateway --route {space9} 255.0.0.0 vpn_gateway --route {space10} 255.0.0.0 vpn_gateway --route {space11} 255.0.0.0 vpn_gateway --route {space12} 255.0.0.0 vpn_gateway --route {space13} 255.0.0.0 vpn_gateway --route {space14} 255.255.0.0 vpn_gateway --route {space15} 255.255.0.0 vpn_gateway --route {space16} 255.255.255.0 vpn_gateway --route {space17} 255.255.0.0 vpn_gateway --route {space18} 255.255.0.0 vpn_gateway --route {space19} 255.255.0.0 vpn_gateway --route {space20} 255.255.0.0 vpn_gateway --route {space21} 255.255.0.0 vpn_gateway --route {space22} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void spacetl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {epic} 255.255.0.0 vpn_gateway --route {space} 255.0.0.0 vpn_gateway --route {space2} 255.255.0.0 vpn_gateway --route {space3} 255.0.0.0 vpn_gateway --route {space4} 255.255.0.0 vpn_gateway --route {space5} 255.255.0.0 vpn_gateway --route {space6} 255.255.0.0 vpn_gateway --route {space7} 255.0.0.0 vpn_gateway --route {space8} 255.0.0.0 vpn_gateway --route {space9} 255.0.0.0 vpn_gateway --route {space10} 255.0.0.0 vpn_gateway --route {space11} 255.0.0.0 vpn_gateway --route {space12} 255.0.0.0 vpn_gateway --route {space13} 255.0.0.0 vpn_gateway --route {space14} 255.255.0.0 vpn_gateway --route {space15} 255.255.0.0 vpn_gateway --route {space16} 255.255.255.0 vpn_gateway --route {space17} 255.255.0.0 vpn_gateway --route {space18} 255.255.0.0 vpn_gateway --route {space19} 255.255.0.0 vpn_gateway --route {space20} 255.255.0.0 vpn_gateway --route {space21} 255.255.0.0 vpn_gateway --route {space22} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void overwatchsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {overwatch} 255.255.0.0 vpn_gateway --route {overwatch2} 255.255.255.0 vpn_gateway --route {overwatch3} 255.0.0.0 vpn_gateway --route {overwatch4} 255.0.0.0 vpn_gateway --route {overwatch5} 255.255.0.0 vpn_gateway --route {overwatch6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void overwatchoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {overwatch} 255.255.0.0 vpn_gateway --route {overwatch2} 255.255.255.0 vpn_gateway --route {overwatch3} 255.0.0.0 vpn_gateway --route {overwatch4} 255.0.0.0 vpn_gateway --route {overwatch5} 255.255.0.0 vpn_gateway --route {overwatch6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void overwatchu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {overwatch} 255.255.0.0 vpn_gateway --route {overwatch2} 255.255.255.0 vpn_gateway --route {overwatch3} 255.0.0.0 vpn_gateway --route {overwatch4} 255.0.0.0 vpn_gateway --route {overwatch5} 255.255.0.0 vpn_gateway --route {overwatch6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void overwatchtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {overwatch} 255.255.0.0 vpn_gateway --route {overwatch2} 255.255.255.0 vpn_gateway --route {overwatch3} 255.0.0.0 vpn_gateway --route {overwatch4} 255.0.0.0 vpn_gateway --route {overwatch5} 255.255.0.0 vpn_gateway --route {overwatch6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void genshinsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {genshin} 255.0.0.0 vpn_gateway --route {genshin2} 255.0.0.0 vpn_gateway --route {genshin3} 255.0.0.0 vpn_gateway --route {genshin4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");


                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void genshinoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {genshin} 255.0.0.0 vpn_gateway --route {genshin2} 255.0.0.0 vpn_gateway --route {genshin3} 255.0.0.0 vpn_gateway --route {genshin4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void genshinu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {genshin} 255.0.0.0 vpn_gateway --route {genshin2} 255.0.0.0 vpn_gateway --route {genshin3} 255.0.0.0 vpn_gateway --route {genshin4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void genshintl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {genshin} 255.0.0.0 vpn_gateway --route {genshin2} 255.0.0.0 vpn_gateway --route {genshin3} 255.0.0.0 vpn_gateway --route {genshin4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void mythologysh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mythology2} 255.0.0.0 vpn_gateway --route {mythology} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mythologyoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mythology2} 255.0.0.0 vpn_gateway --route {mythology} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mythologyu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mythology2} 255.0.0.0 vpn_gateway --route {mythology} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mythologytl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {mythology2} 255.0.0.0 vpn_gateway --route {mythology} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void rocketsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;


                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rocketoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rocketu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rockettl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {rage} 255.255.0.0 vpn_gateway --route {rage2} 255.255.0.0 vpn_gateway --route {epic} 255.255.0.0 vpn_gateway --route {rockstar1} 255.0.0.0 vpn_gateway --route {rockstar2} 255.0.0.0 vpn_gateway --route {rockstar3} 255.0.0.0 vpn_gateway --route {rockstar4} 255.0.0.0 vpn_gateway --route {rockstar5} 255.255.0.0 vpn_gateway --route {rockstar6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void dotash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {dota} 255.0.0.0 vpn_gateway --route {dota1} 255.255.0.0 vpn_gateway --route {dota2} 255.255.0.0 vpn_gateway --route {dota3} 255.255.0.0 vpn_gateway --route {dota4} 255.255.0.0 vpn_gateway --route {dota5} 255.0.0.0 vpn_gateway --route {dota6} 255.255.0.0 vpn_gateway --route {dota7} 255.255.255.0 vpn_gateway --route {dota8} 255.255.0.0 vpn_gateway --route {dota9} 255.255.255.0 vpn_gateway --route {dota10} 255.255.255.0 vpn_gateway --route {dota11} 255.255.0.0 vpn_gateway --route {dota12} 255.255.0.0 vpn_gateway --route {dota13} 255.255.0.0 vpn_gateway --route {dota14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dotaoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {dota} 255.0.0.0 vpn_gateway --route {dota1} 255.255.0.0 vpn_gateway --route {dota2} 255.255.0.0 vpn_gateway --route {dota3} 255.255.0.0 vpn_gateway --route {dota4} 255.255.0.0 vpn_gateway --route {dota5} 255.0.0.0 vpn_gateway --route {dota6} 255.255.0.0 vpn_gateway --route {dota7} 255.255.255.0 vpn_gateway --route {dota8} 255.255.0.0 vpn_gateway --route {dota9} 255.255.255.0 vpn_gateway --route {dota10} 255.255.255.0 vpn_gateway --route {dota11} 255.255.0.0 vpn_gateway --route {dota12} 255.255.0.0 vpn_gateway --route {dota13} 255.255.0.0 vpn_gateway --route {dota14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dotau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {dota} 255.0.0.0 vpn_gateway --route {dota1} 255.255.0.0 vpn_gateway --route {dota2} 255.255.0.0 vpn_gateway --route {dota3} 255.255.0.0 vpn_gateway --route {dota4} 255.255.0.0 vpn_gateway --route {dota5} 255.0.0.0 vpn_gateway --route {dota6} 255.255.0.0 vpn_gateway --route {dota7} 255.255.255.0 vpn_gateway --route {dota8} 255.255.0.0 vpn_gateway --route {dota9} 255.255.255.0 vpn_gateway --route {dota10} 255.255.255.0 vpn_gateway --route {dota11} 255.255.0.0 vpn_gateway --route {dota12} 255.255.0.0 vpn_gateway --route {dota13} 255.255.0.0 vpn_gateway --route {dota14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void dotatl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {dota} 255.0.0.0 vpn_gateway --route {dota1} 255.255.0.0 vpn_gateway --route {dota2} 255.255.0.0 vpn_gateway --route {dota3} 255.255.0.0 vpn_gateway --route {dota4} 255.255.0.0 vpn_gateway --route {dota5} 255.0.0.0 vpn_gateway --route {dota6} 255.255.0.0 vpn_gateway --route {dota7} 255.255.255.0 vpn_gateway --route {dota8} 255.255.0.0 vpn_gateway --route {dota9} 255.255.255.0 vpn_gateway --route {dota10} 255.255.255.0 vpn_gateway --route {dota11} 255.255.0.0 vpn_gateway --route {dota12} 255.255.0.0 vpn_gateway --route {dota13} 255.255.0.0 vpn_gateway --route {dota14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void arash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void araoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void arau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void aratl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void wowsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow6} 255.255.255.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void wowoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow6} 255.255.255.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void wowu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow6} 255.255.255.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void wowtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow6} 255.255.255.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void cksh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ck} 255.255.0.0 vpn_gateway --route {ck1} 255.255.255.255 vpn_gateway --route {ck2} 255.255.255.255 vpn_gateway --route {ck3} 255.255.255.255 vpn_gateway --route {ck4} 255.255.255.255 vpn_gateway --route {ck5} 255.255.0.0 vpn_gateway --route {ck6} 255.255.255.255 vpn_gateway --route {ck7} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void ckoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ck} 255.255.0.0 vpn_gateway --route {ck1} 255.255.255.255 vpn_gateway --route {ck2} 255.255.255.255 vpn_gateway --route {ck3} 255.255.255.255 vpn_gateway --route {ck4} 255.255.255.255 vpn_gateway --route {ck5} 255.255.0.0 vpn_gateway --route {ck6} 255.255.255.255 vpn_gateway --route {ck7} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cku()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ck} 255.255.0.0 vpn_gateway --route {ck1} 255.255.255.255 vpn_gateway --route {ck2} 255.255.255.255 vpn_gateway --route {ck3} 255.255.255.255 vpn_gateway --route {ck4} 255.255.255.255 vpn_gateway --route {ck5} 255.255.0.0 vpn_gateway --route {ck6} 255.255.255.255 vpn_gateway --route {ck7} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cktl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {ck} 255.255.0.0 vpn_gateway --route {ck1} 255.255.255.255 vpn_gateway --route {ck2} 255.255.255.255 vpn_gateway --route {ck3} 255.255.255.255 vpn_gateway --route {ck4} 255.255.255.255 vpn_gateway --route {ck5} 255.255.0.0 vpn_gateway --route {ck6} 255.255.255.255 vpn_gateway --route {ck7} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void nvidiash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {nvidia} 255.255.0.0 vpn_gateway --route {nvidia2} 255.255.0.0 vpn_gateway --route {nvidia3} 255.255.0.0 vpn_gateway --route {nvidia4} 255.255.0.0 vpn_gateway --route {nvidia5} 255.255.0.0 vpn_gateway --route {nvidia6} 255.255.0.0 vpn_gateway --route {nvidia7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void nvidiaoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {nvidia} 255.255.0.0 vpn_gateway --route {nvidia2} 255.255.0.0 vpn_gateway --route {nvidia3} 255.255.0.0 vpn_gateway --route {nvidia4} 255.255.0.0 vpn_gateway --route {nvidia5} 255.255.0.0 vpn_gateway --route {nvidia6} 255.255.0.0 vpn_gateway --route {nvidia7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void nvidiau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {nvidia} 255.255.0.0 vpn_gateway --route {nvidia2} 255.255.0.0 vpn_gateway --route {nvidia3} 255.255.0.0 vpn_gateway --route {nvidia4} 255.255.0.0 vpn_gateway --route {nvidia5} 255.255.0.0 vpn_gateway --route {nvidia6} 255.255.0.0 vpn_gateway --route {nvidia7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void nvidiatl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {nvidia} 255.255.0.0 vpn_gateway --route {nvidia2} 255.255.0.0 vpn_gateway --route {nvidia3} 255.255.0.0 vpn_gateway --route {nvidia4} 255.255.0.0 vpn_gateway --route {nvidia5} 255.255.0.0 vpn_gateway --route {nvidia6} 255.255.0.0 vpn_gateway --route {nvidia7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void fs22sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {fs221} 255.255.0.0 vpn_gateway --route {fs222} 255.255.255.255 vpn_gateway --route {fs223} 255.255.255.255 vpn_gateway --route {fs224} 255.255.255.0 vpn_gateway --route {fs225} 255.255.0.0 vpn_gateway --route {fs226} 255.255.0.0 vpn_gateway --route {fs227} 255.255.0.0 vpn_gateway --route {fs228} 255.0.0.0 vpn_gateway --route {fs229} 255.0.0.0 vpn_gateway --route {fs2210} 255.0.0.0 vpn_gateway --route {fs2211} 255.0.0.0 vpn_gateway --route {fs2212} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fs22oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {fs221} 255.255.0.0 vpn_gateway --route {fs222} 255.255.255.255 vpn_gateway --route {fs223} 255.255.255.255 vpn_gateway --route {fs224} 255.255.255.0 vpn_gateway --route {fs225} 255.255.0.0 vpn_gateway --route {fs226} 255.255.0.0 vpn_gateway --route {fs227} 255.255.0.0 vpn_gateway --route {fs228} 255.0.0.0 vpn_gateway --route {fs229} 255.0.0.0 vpn_gateway --route {fs2210} 255.0.0.0 vpn_gateway --route {fs2211} 255.0.0.0 vpn_gateway --route {fs2212} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fs22u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {epic} 255.255.0.0 vpn_gateway --route {fs221} 255.255.0.0 vpn_gateway --route {fs222} 255.255.255.255 vpn_gateway --route {fs223} 255.255.255.255 vpn_gateway --route {fs224} 255.255.255.0 vpn_gateway --route {fs225} 255.255.0.0 vpn_gateway --route {fs226} 255.255.0.0 vpn_gateway --route {fs227} 255.255.0.0 vpn_gateway --route {fs228} 255.0.0.0 vpn_gateway --route {fs229} 255.0.0.0 vpn_gateway --route {fs2210} 255.0.0.0 vpn_gateway --route {fs2211} 255.0.0.0 vpn_gateway --route {fs2212} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fs22tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {epic} 255.255.0.0 vpn_gateway --route {fs221} 255.255.0.0 vpn_gateway --route {fs222} 255.255.255.255 vpn_gateway --route {fs223} 255.255.255.255 vpn_gateway --route {fs224} 255.255.255.0 vpn_gateway --route {fs225} 255.255.0.0 vpn_gateway --route {fs226} 255.255.0.0 vpn_gateway --route {fs227} 255.255.0.0 vpn_gateway --route {fs228} 255.0.0.0 vpn_gateway --route {fs229} 255.0.0.0 vpn_gateway --route {fs2210} 255.0.0.0 vpn_gateway --route {fs2211} 255.0.0.0 vpn_gateway --route {fs2212} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void cod6sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        // gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {cod1} 255.0.0.0 vpn_gateway --route {cod2} 255.0.0.0 vpn_gateway --route {cod3} 255.0.0.0 vpn_gateway --route {cod4} 255.0.0.0 vpn_gateway --route {cod5} 255.0.0.0 vpn_gateway --route {cod6} 255.0.0.0 vpn_gateway --route {cod7} 255.255.0.0 vpn_gateway --route {cod8} 255.0.0.0 vpn_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cod6oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        //  gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {cod1} 255.0.0.0 vpn_gateway --route {cod2} 255.0.0.0 vpn_gateway --route {cod3} 255.0.0.0 vpn_gateway --route {cod4} 255.0.0.0 vpn_gateway --route {cod5} 255.0.0.0 vpn_gateway --route {cod6} 255.0.0.0 vpn_gateway --route {cod7} 255.255.0.0 vpn_gateway --route {cod8} 255.0.0.0 vpn_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cod6u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        //  gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {cod1} 255.0.0.0 vpn_gateway --route {cod2} 255.0.0.0 vpn_gateway --route {cod3} 255.0.0.0 vpn_gateway --route {cod4} 255.0.0.0 vpn_gateway --route {cod5} 255.0.0.0 vpn_gateway --route {cod6} 255.0.0.0 vpn_gateway --route {cod7} 255.255.0.0 vpn_gateway --route {cod8} 255.0.0.0 vpn_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void cod6tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {cod1} 255.0.0.0 vpn_gateway --route {cod2} 255.0.0.0 vpn_gateway --route {cod3} 255.0.0.0 vpn_gateway --route {cod4} 255.0.0.0 vpn_gateway --route {cod5} 255.0.0.0 vpn_gateway --route {cod6} 255.0.0.0 vpn_gateway --route {cod7} 255.255.0.0 vpn_gateway --route {cod8} 255.0.0.0 vpn_gateway --route {ara} 255.0.0.0 vpn_gateway --route {ara2} 255.0.0.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void offthegridsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ofthegrid1} 255.0.0.0 vpn_gateway --route {ofthegrid2} 255.0.0.0 vpn_gateway --route {ofthegrid3} 255.0.0.0 vpn_gateway --route {ofthegrid4} 255.0.0.0 vpn_gateway --route {ofthegrid5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void offthegridoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ofthegrid1} 255.0.0.0 vpn_gateway --route {ofthegrid2} 255.0.0.0 vpn_gateway --route {ofthegrid3} 255.0.0.0 vpn_gateway --route {ofthegrid4} 255.0.0.0 vpn_gateway --route {ofthegrid5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void offthegridu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {ofthegrid1} 255.0.0.0 vpn_gateway --route {ofthegrid2} 255.0.0.0 vpn_gateway --route {ofthegrid3} 255.0.0.0 vpn_gateway --route {ofthegrid4} 255.0.0.0 vpn_gateway --route {ofthegrid5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void offthegridtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {ofthegrid1} 255.0.0.0 vpn_gateway --route {ofthegrid2} 255.0.0.0 vpn_gateway --route {ofthegrid3} 255.0.0.0 vpn_gateway --route {ofthegrid4} 255.0.0.0 vpn_gateway --route {ofthegrid5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.255.255.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void marvelsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {marvel1} 255.0.0.0 vpn_gateway --route {marvel2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void marveloh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {marvel1} 255.0.0.0 vpn_gateway --route {marvel2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void marvelu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {marvel1} 255.0.0.0 vpn_gateway --route {marvel2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void marveltl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {marvel1} 255.0.0.0 vpn_gateway --route {marvel2} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }


        private async void coh2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.255.0.0 vpn_gateway --route {coh23} 255.255.0.0 vpn_gateway --route {coh24} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void coh2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.255.0.0 vpn_gateway --route {coh23} 255.255.0.0 vpn_gateway --route {coh24} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void coh2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.255.0.0 vpn_gateway --route {coh23} 255.255.0.0 vpn_gateway --route {coh24} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void coh2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.255.0.0 vpn_gateway --route {coh23} 255.255.0.0 vpn_gateway --route {coh24} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void coh3sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.0.0.0 vpn_gateway --route {coh23} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void coh3oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.0.0.0 vpn_gateway --route {coh23} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void coh3u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.0.0.0 vpn_gateway --route {coh23} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void coh3tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {coh21} 255.0.0.0 vpn_gateway --route {coh22} 255.0.0.0 vpn_gateway --route {coh23} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void darkanddarkersh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {darkanddarker1} 255.255.0.0 vpn_gateway --route {darkanddarker2} 255.255.0.0 vpn_gateway --route {darkanddarker3} 255.255.0.0 vpn_gateway --route {darkanddarker4} 255.255.0.0 vpn_gateway --route {darkanddarker5} 255.255.0.0 vpn_gateway --route {darkanddarker6} 255.255.0.0 vpn_gateway --route {darkanddarker7} 255.255.0.0 vpn_gateway --route {darkanddarker8} 255.255.0.0 vpn_gateway --route {darkanddarker9} 255.255.0.0 vpn_gateway --route {darkanddarker10} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void darkanddarkeroh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {darkanddarker1} 255.255.0.0 vpn_gateway --route {darkanddarker2} 255.255.0.0 vpn_gateway --route {darkanddarker3} 255.255.0.0 vpn_gateway --route {darkanddarker4} 255.255.0.0 vpn_gateway --route {darkanddarker5} 255.255.0.0 vpn_gateway --route {darkanddarker6} 255.255.0.0 vpn_gateway --route {darkanddarker7} 255.255.0.0 vpn_gateway --route {darkanddarker8} 255.255.0.0 vpn_gateway --route {darkanddarker9} 255.255.0.0 vpn_gateway --route {darkanddarker10} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void darkanddarkeru()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {darkanddarker1} 255.255.0.0 vpn_gateway --route {darkanddarker2} 255.255.0.0 vpn_gateway --route {darkanddarker3} 255.255.0.0 vpn_gateway --route {darkanddarker4} 255.255.0.0 vpn_gateway --route {darkanddarker5} 255.255.0.0 vpn_gateway --route {darkanddarker6} 255.255.0.0 vpn_gateway --route {darkanddarker7} 255.255.0.0 vpn_gateway --route {darkanddarker8} 255.255.0.0 vpn_gateway --route {darkanddarker9} 255.255.0.0 vpn_gateway --route {darkanddarker10} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void darkanddarkertl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {darkanddarker1} 255.255.0.0 vpn_gateway --route {darkanddarker2} 255.255.0.0 vpn_gateway --route {darkanddarker3} 255.255.0.0 vpn_gateway --route {darkanddarker4} 255.255.0.0 vpn_gateway --route {darkanddarker5} 255.255.0.0 vpn_gateway --route {darkanddarker6} 255.255.0.0 vpn_gateway --route {darkanddarker7} 255.255.0.0 vpn_gateway --route {darkanddarker8} 255.255.0.0 vpn_gateway --route {darkanddarker9} 255.255.0.0 vpn_gateway --route {darkanddarker10} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void destiny2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {destiny21} 255.255.0.0 vpn_gateway --route {destiny22} 255.0.0.0 vpn_gateway --route {destiny23} 255.0.0.0 vpn_gateway --route {destiny24} 255.255.0.0 vpn_gateway --route {destiny25} 255.0.0.0 vpn_gateway --route {destiny26} 255.0.0.0 vpn_gateway --route {destiny27} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی دستینی 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void destiny2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {destiny21} 255.255.0.0 vpn_gateway --route {destiny22} 255.0.0.0 vpn_gateway --route {destiny23} 255.0.0.0 vpn_gateway --route {destiny24} 255.255.0.0 vpn_gateway --route {destiny25} 255.0.0.0 vpn_gateway --route {destiny26} 255.0.0.0 vpn_gateway --route {destiny27} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی دستینی 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void destiny2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {destiny21} 255.255.0.0 vpn_gateway --route {destiny22} 255.0.0.0 vpn_gateway --route {destiny23} 255.0.0.0 vpn_gateway --route {destiny24} 255.255.0.0 vpn_gateway --route {destiny25} 255.0.0.0 vpn_gateway --route {destiny26} 255.0.0.0 vpn_gateway --route {destiny27} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی دستینی 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void destiny2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {destiny21} 255.255.0.0 vpn_gateway --route {destiny22} 255.0.0.0 vpn_gateway --route {destiny23} 255.0.0.0 vpn_gateway --route {destiny24} 255.255.0.0 vpn_gateway --route {destiny25} 255.0.0.0 vpn_gateway --route {destiny26} 255.0.0.0 vpn_gateway --route {destiny27} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی دستینی 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }


        private async void helldivers2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {helldivers1} 255.255.0.0 vpn_gateway --route {helldivers2} 255.0.0.0 vpn_gateway --route {helldivers3} 255.255.0.0 vpn_gateway --route {helldivers4} 255.255.0.0 vpn_gateway --route {helldivers5} 255.255.0.0 vpn_gateway --route {helldivers6} 255.0.0.0 vpn_gateway --route {helldivers7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void helldivers2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {helldivers1} 255.255.0.0 vpn_gateway --route {helldivers2} 255.0.0.0 vpn_gateway --route {helldivers3} 255.255.0.0 vpn_gateway --route {helldivers4} 255.255.0.0 vpn_gateway --route {helldivers5} 255.255.0.0 vpn_gateway --route {helldivers6} 255.0.0.0 vpn_gateway --route {helldivers7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void helldivers2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {helldivers1} 255.255.0.0 vpn_gateway --route {helldivers2} 255.0.0.0 vpn_gateway --route {helldivers3} 255.255.0.0 vpn_gateway --route {helldivers4} 255.255.0.0 vpn_gateway --route {helldivers5} 255.255.0.0 vpn_gateway --route {helldivers6} 255.0.0.0 vpn_gateway --route {helldivers7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void helldivers2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {helldivers1} 255.255.0.0 vpn_gateway --route {helldivers2} 255.0.0.0 vpn_gateway --route {helldivers3} 255.255.0.0 vpn_gateway --route {helldivers4} 255.255.0.0 vpn_gateway --route {helldivers5} 255.255.0.0 vpn_gateway --route {helldivers6} 255.0.0.0 vpn_gateway --route {helldivers7} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }


        private async void lostarksh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {lostark1} 255.0.0.0 vpn_gateway --route {lostark2} 255.0.0.0 vpn_gateway --route {lostark3} 255.0.0.0 vpn_gateway --route {lostark4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void lostarkoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {lostark1} 255.0.0.0 vpn_gateway --route {lostark2} 255.0.0.0 vpn_gateway --route {lostark3} 255.0.0.0 vpn_gateway --route {lostark4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void lostarku()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {lostark1} 255.0.0.0 vpn_gateway --route {lostark2} 255.0.0.0 vpn_gateway --route {lostark3} 255.0.0.0 vpn_gateway --route {lostark4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void lostarktl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {lostark1} 255.0.0.0 vpn_gateway --route {lostark2} 255.0.0.0 vpn_gateway --route {lostark3} 255.0.0.0 vpn_gateway --route {lostark4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void steeldivision2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {steeldivision2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی استیل دیویژن 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void steeldivision2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {steeldivision2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی استیل دیویژن 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void steeldivision2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {steeldivision2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی استیل دیویژن 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void steeldivision2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {steeldivision2} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "برای اتصال درست در بازی استیل دیویژن 2  خواهشا نرم افزار استیم خود را بسته و دوباره باز کنید";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;
                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void lotronlinesh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {lotronline1} 255.255.255.0 vpn_gateway --route {lotronline1} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void lotronlineoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {lotronline1} 255.255.255.0 vpn_gateway --route {lotronline1} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void lotronlineu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {lotronline1} 255.255.255.0 vpn_gateway --route {lotronline1} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void lotronlinetl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {lotronline1} 255.255.255.0 vpn_gateway --route {lotronline1} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void throneandlibertysh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {throneandliberty1} 255.0.0.0 vpn_gateway --route {throneandliberty2} 255.0.0.0 vpn_gateway --route {throneandliberty3} 255.255.0.0 vpn_gateway --route {throneandliberty4} 255.0.0.0 vpn_gateway --route {throneandliberty5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void throneandlibertyoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {throneandliberty1} 255.0.0.0 vpn_gateway --route {throneandliberty2} 255.0.0.0 vpn_gateway --route {throneandliberty3} 255.255.0.0 vpn_gateway --route {throneandliberty4} 255.0.0.0 vpn_gateway --route {throneandliberty5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void throneandlibertyu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {throneandliberty1} 255.0.0.0 vpn_gateway --route {throneandliberty2} 255.0.0.0 vpn_gateway --route {throneandliberty3} 255.255.0.0 vpn_gateway --route {throneandliberty4} 255.0.0.0 vpn_gateway --route {throneandliberty5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void throneandlibertytl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {throneandliberty1} 255.0.0.0 vpn_gateway --route {throneandliberty2} 255.0.0.0 vpn_gateway --route {throneandliberty3} 255.255.0.0 vpn_gateway --route {throneandliberty4} 255.0.0.0 vpn_gateway --route {throneandliberty5} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void threekingdomssh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {threekingdom1} 255.255.0.0 vpn_gateway --route {threekingdom2} 255.255.0.0 vpn_gateway --route {threekingdom3} 255.255.0.0 vpn_gateway --route {threekingdom4} 255.255.0.0 vpn_gateway --route {threekingdom5} 255.255.0.0 vpn_gateway --route {threekingdom6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void threekingdomsoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {threekingdom1} 255.255.0.0 vpn_gateway --route {threekingdom2} 255.255.0.0 vpn_gateway --route {threekingdom3} 255.255.0.0 vpn_gateway --route {threekingdom4} 255.255.0.0 vpn_gateway --route {threekingdom5} 255.255.0.0 vpn_gateway --route {threekingdom6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void threekingdomsu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {threekingdom1} 255.255.0.0 vpn_gateway --route {threekingdom2} 255.255.0.0 vpn_gateway --route {threekingdom3} 255.255.0.0 vpn_gateway --route {threekingdom4} 255.255.0.0 vpn_gateway --route {threekingdom5} 255.255.0.0 vpn_gateway --route {threekingdom6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void threekingdomstl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {threekingdom1} 255.255.0.0 vpn_gateway --route {threekingdom2} 255.255.0.0 vpn_gateway --route {threekingdom3} 255.255.0.0 vpn_gateway --route {threekingdom4} 255.255.0.0 vpn_gateway --route {threekingdom5} 255.255.0.0 vpn_gateway --route {threekingdom6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void warhammer3sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {warhammer31} 255.255.0.0 vpn_gateway --route {warhammer32} 255.255.0.0 vpn_gateway --route {warhammer33} 255.255.0.0 vpn_gateway --route {warhammer34} 255.255.0.0 vpn_gateway --route {warhammer35} 255.255.0.0 vpn_gateway --route {warhammer36} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warhammer3oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {warhammer31} 255.255.0.0 vpn_gateway --route {warhammer32} 255.255.0.0 vpn_gateway --route {warhammer33} 255.255.0.0 vpn_gateway --route {warhammer34} 255.255.0.0 vpn_gateway --route {warhammer35} 255.255.0.0 vpn_gateway --route {warhammer36} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warhammer3u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {warhammer31} 255.255.0.0 vpn_gateway --route {warhammer32} 255.255.0.0 vpn_gateway --route {warhammer33} 255.255.0.0 vpn_gateway --route {warhammer34} 255.255.0.0 vpn_gateway --route {warhammer35} 255.255.0.0 vpn_gateway --route {warhammer36} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warhammer3tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {warhammer31} 255.255.0.0 vpn_gateway --route {warhammer32} 255.255.0.0 vpn_gateway --route {warhammer33} 255.255.0.0 vpn_gateway --route {warhammer34} 255.255.0.0 vpn_gateway --route {warhammer35} 255.255.0.0 vpn_gateway --route {warhammer36} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void vrchatsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {vrchat1} 255.255.0.0 vpn_gateway --route {vrchat2} 255.255.0.0 vpn_gateway --route {vrchat3} 255.255.0.0 vpn_gateway --route {vrchat4} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void vrchatoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {vrchat1} 255.255.0.0 vpn_gateway --route {vrchat2} 255.255.0.0 vpn_gateway --route {vrchat3} 255.255.0.0 vpn_gateway --route {vrchat4} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void vrchatu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {vrchat1} 255.255.0.0 vpn_gateway --route {vrchat2} 255.255.0.0 vpn_gateway --route {vrchat3} 255.255.0.0 vpn_gateway --route {vrchat4} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void vrchattl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {vrchat1} 255.255.0.0 vpn_gateway --route {vrchat2} 255.255.0.0 vpn_gateway --route {vrchat3} 255.255.0.0 vpn_gateway --route {vrchat4} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void efootballsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {efootball1} 255.0.0.0 vpn_gateway --route {efootball2} 255.0.0.0 vpn_gateway --route {efootball3} 255.0.0.0 vpn_gateway --route {efootball4} 255.0.0.0 vpn_gateway --route {efootball5} 255.0.0.0 vpn_gateway --route {efootball6} 255.0.0.0 vpn_gateway --route {efootball7} 255.255.0.0 vpn_gateway --route {efootball8} 255.0.0.0 vpn_gateway --route {efootball9} 255.0.0.0 vpn_gateway --route {efootball10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void efootballoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {efootball1} 255.0.0.0 vpn_gateway --route {efootball2} 255.0.0.0 vpn_gateway --route {efootball3} 255.0.0.0 vpn_gateway --route {efootball4} 255.0.0.0 vpn_gateway --route {efootball5} 255.0.0.0 vpn_gateway --route {efootball6} 255.0.0.0 vpn_gateway --route {efootball7} 255.255.0.0 vpn_gateway --route {efootball8} 255.0.0.0 vpn_gateway --route {efootball9} 255.0.0.0 vpn_gateway --route {efootball10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void efootballu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {efootball1} 255.0.0.0 vpn_gateway --route {efootball2} 255.0.0.0 vpn_gateway --route {efootball3} 255.0.0.0 vpn_gateway --route {efootball4} 255.0.0.0 vpn_gateway --route {efootball5} 255.0.0.0 vpn_gateway --route {efootball6} 255.0.0.0 vpn_gateway --route {efootball7} 255.255.0.0 vpn_gateway --route {efootball8} 255.0.0.0 vpn_gateway --route {efootball9} 255.0.0.0 vpn_gateway --route {efootball10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void efootballtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {efootball1} 255.0.0.0 vpn_gateway --route {efootball2} 255.0.0.0 vpn_gateway --route {efootball3} 255.0.0.0 vpn_gateway --route {efootball4} 255.0.0.0 vpn_gateway --route {efootball5} 255.0.0.0 vpn_gateway --route {efootball6} 255.0.0.0 vpn_gateway --route {efootball7} 255.255.0.0 vpn_gateway --route {efootball8} 255.0.0.0 vpn_gateway --route {efootball9} 255.0.0.0 vpn_gateway --route {efootball10} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void xboxsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xboxoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xboxu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void xboxtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {fc25} 255.0.0.0 vpn_gateway --route {fc252} 255.0.0.0 vpn_gateway --route {fc253} 255.0.0.0 vpn_gateway --route {ubisoft1} 255.0.0.0 vpn_gateway --route {ubisoft2} 255.0.0.0 vpn_gateway --route {ubisoft3} 255.0.0.0 vpn_gateway --route {ubisoft4} 255.255.0.0 vpn_gateway --route {ubisoft5} 255.255.0.0 vpn_gateway --route {ubisoft6} 255.255.0.0 vpn_gateway --route {ea} 255.0.0.0 vpn_gateway --route {ea2} 255.0.0.0 vpn_gateway --route {ea3} 255.0.0.0 vpn_gateway --route {ea6} 255.0.0.0 vpn_gateway --route {ea8} 255.255.0.0 vpn_gateway --route {ea9} 255.0.0.0 vpn_gateway --route {wow} 255.255.0.0 vpn_gateway --route {wow2} 255.255.0.0 vpn_gateway --route {wow3} 255.0.0.0 vpn_gateway --route {wow4} 255.255.255.0 vpn_gateway --route {wow5} 255.255.0.0 vpn_gateway --route {wow7} 255.0.0.0 vpn_gateway --route {wow8} 255.255.255.0 vpn_gateway --route {ara3} 255.0.0.0 vpn_gateway --route {ara4} 255.0.0.0 vpn_gateway --route {ara5} 255.0.0.0 vpn_gateway --route {ara6} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void amongussh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {amongus} 255.255.0.0 vpn_gateway --route {amongus2} 255.255.0.0 vpn_gateway --route {amongus3} 255.255.0.0 vpn_gateway --route {amongus4} 255.255.0.0 vpn_gateway --route {amongus5} 255.0.0.0 vpn_gateway --route {amongus6} 255.255.0.0 vpn_gateway --route {amongus7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void amongusoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {amongus} 255.255.0.0 vpn_gateway --route {amongus2} 255.255.0.0 vpn_gateway --route {amongus3} 255.255.0.0 vpn_gateway --route {amongus4} 255.255.0.0 vpn_gateway --route {amongus5} 255.0.0.0 vpn_gateway --route {amongus6} 255.255.0.0 vpn_gateway --route {amongus7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void amongusu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {amongus} 255.255.0.0 vpn_gateway --route {amongus2} 255.255.0.0 vpn_gateway --route {amongus3} 255.255.0.0 vpn_gateway --route {amongus4} 255.255.0.0 vpn_gateway --route {amongus5} 255.0.0.0 vpn_gateway --route {amongus6} 255.255.0.0 vpn_gateway --route {amongus7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void amongustl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {amongus} 255.255.0.0 vpn_gateway --route {amongus2} 255.255.0.0 vpn_gateway --route {amongus3} 255.255.0.0 vpn_gateway --route {amongus4} 255.255.0.0 vpn_gateway --route {amongus5} 255.0.0.0 vpn_gateway --route {amongus6} 255.255.0.0 vpn_gateway --route {amongus7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void deadbydaylight2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {deadbydaylight} 255.0.0.0 vpn_gateway --route {deadbydaylight2} 255.0.0.0 vpn_gateway --route {deadbydaylight3} 255.0.0.0 vpn_gateway --route {deadbydaylight4} 255.255.0.0 vpn_gateway --route {deadbydaylight5} 255.255.0.0 vpn_gateway --route {deadbydaylight6} 255.0.0.0 vpn_gateway --route {deadbydaylight7} 255.0.0.0 vpn_gateway --route {deadbydaylight8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deadbydaylight2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {deadbydaylight} 255.0.0.0 vpn_gateway --route {deadbydaylight2} 255.0.0.0 vpn_gateway --route {deadbydaylight3} 255.0.0.0 vpn_gateway --route {deadbydaylight4} 255.255.0.0 vpn_gateway --route {deadbydaylight5} 255.255.0.0 vpn_gateway --route {deadbydaylight6} 255.0.0.0 vpn_gateway --route {deadbydaylight7} 255.0.0.0 vpn_gateway --route {deadbydaylight8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deadbydaylight2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {deadbydaylight} 255.0.0.0 vpn_gateway --route {deadbydaylight2} 255.0.0.0 vpn_gateway --route {deadbydaylight3} 255.0.0.0 vpn_gateway --route {deadbydaylight4} 255.255.0.0 vpn_gateway --route {deadbydaylight5} 255.255.0.0 vpn_gateway --route {deadbydaylight6} 255.0.0.0 vpn_gateway --route {deadbydaylight7} 255.0.0.0 vpn_gateway --route {deadbydaylight8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deadbydaylight2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {deadbydaylight} 255.0.0.0 vpn_gateway --route {deadbydaylight2} 255.0.0.0 vpn_gateway --route {deadbydaylight3} 255.0.0.0 vpn_gateway --route {deadbydaylight4} 255.255.0.0 vpn_gateway --route {deadbydaylight5} 255.255.0.0 vpn_gateway --route {deadbydaylight6} 255.0.0.0 vpn_gateway --route {deadbydaylight7} 255.0.0.0 vpn_gateway --route {deadbydaylight8} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void deadlocksh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {deadlock} 255.255.0.0 vpn_gateway --route {deadlock2} 255.255.0.0 vpn_gateway --route {deadlock3} 255.255.0.0 vpn_gateway --route {deadlock4} 255.255.0.0 vpn_gateway --route {deadlock5} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deadlockoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {deadlock} 255.255.0.0 vpn_gateway --route {deadlock2} 255.255.0.0 vpn_gateway --route {deadlock3} 255.255.0.0 vpn_gateway --route {deadlock4} 255.255.0.0 vpn_gateway --route {deadlock5} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deadlocku()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {deadlock} 255.255.0.0 vpn_gateway --route {deadlock2} 255.255.0.0 vpn_gateway --route {deadlock3} 255.255.0.0 vpn_gateway --route {deadlock4} 255.255.0.0 vpn_gateway --route {deadlock5} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void deadlocktl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {deadlock} 255.255.0.0 vpn_gateway --route {deadlock2} 255.255.0.0 vpn_gateway --route {deadlock3} 255.255.0.0 vpn_gateway --route {deadlock4} 255.255.0.0 vpn_gateway --route {deadlock5} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void insurgencysandstormsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {insurgencysandstorm} 255.255.0.0 vpn_gateway --route {insurgencysandstorm1} 255.255.0.0 vpn_gateway --route {insurgencysandstorm2} 255.0.0.0 vpn_gateway --route {insurgencysandstorm3} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {insurgencysandstorm5} 255.255.0.0 vpn_gateway --route {insurgencysandstorm6} 255.0.0.0 vpn_gateway --route {insurgencysandstorm7} 255.0.0.0 vpn_gateway --route {insurgencysandstorm8} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void insurgencysandstormoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {insurgencysandstorm} 255.255.0.0 vpn_gateway --route {insurgencysandstorm1} 255.255.0.0 vpn_gateway --route {insurgencysandstorm2} 255.0.0.0 vpn_gateway --route {insurgencysandstorm3} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {insurgencysandstorm5} 255.255.0.0 vpn_gateway --route {insurgencysandstorm6} 255.0.0.0 vpn_gateway --route {insurgencysandstorm7} 255.0.0.0 vpn_gateway --route {insurgencysandstorm8} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void insurgencysandstormu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {insurgencysandstorm} 255.255.0.0 vpn_gateway --route {insurgencysandstorm1} 255.255.0.0 vpn_gateway --route {insurgencysandstorm2} 255.0.0.0 vpn_gateway --route {insurgencysandstorm3} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {insurgencysandstorm5} 255.255.0.0 vpn_gateway --route {insurgencysandstorm6} 255.0.0.0 vpn_gateway --route {insurgencysandstorm7} 255.0.0.0 vpn_gateway --route {insurgencysandstorm8} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void insurgencysandstormtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {insurgencysandstorm} 255.255.0.0 vpn_gateway --route {insurgencysandstorm1} 255.255.0.0 vpn_gateway --route {insurgencysandstorm2} 255.0.0.0 vpn_gateway --route {insurgencysandstorm3} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {insurgencysandstorm5} 255.255.0.0 vpn_gateway --route {insurgencysandstorm6} 255.0.0.0 vpn_gateway --route {insurgencysandstorm7} 255.0.0.0 vpn_gateway --route {insurgencysandstorm8} 255.255.0.0 vpn_gateway --route {insurgencysandstorm4} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void warthundersh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {warthunder} 255.255.0.0 vpn_gateway --route {warthunder2} 255.255.0.0 vpn_gateway --route {warthunder3} 255.255.0.0 vpn_gateway --route {warthunder4} 255.255.0.0 vpn_gateway --route {warthunder5} 255.0.0.0 vpn_gateway --route {warthunder6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warthunderoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {warthunder} 255.255.0.0 vpn_gateway --route {warthunder2} 255.255.0.0 vpn_gateway --route {warthunder3} 255.255.0.0 vpn_gateway --route {warthunder4} 255.255.0.0 vpn_gateway --route {warthunder5} 255.0.0.0 vpn_gateway --route {warthunder6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warthunderu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {warthunder} 255.255.0.0 vpn_gateway --route {warthunder2} 255.255.0.0 vpn_gateway --route {warthunder3} 255.255.0.0 vpn_gateway --route {warthunder4} 255.255.0.0 vpn_gateway --route {warthunder5} 255.0.0.0 vpn_gateway --route {warthunder6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void warthundertl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {warthunder} 255.255.0.0 vpn_gateway --route {warthunder2} 255.255.0.0 vpn_gateway --route {warthunder3} 255.255.0.0 vpn_gateway --route {warthunder4} 255.255.0.0 vpn_gateway --route {warthunder5} 255.0.0.0 vpn_gateway --route {warthunder6} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void paladinssh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {paladins} 255.255.0.0 vpn_gateway --route {paladins2} 255.255.0.0 vpn_gateway --route {paladins3} 255.255.0.0 vpn_gateway --route {paladins4} 255.255.0.0 vpn_gateway --route {paladins5} 255.0.0.0 vpn_gateway --route {paladins6} 255.0.0.0 vpn_gateway --route {paladins7} 255.255.255.0 vpn_gateway --route {paladins8} 255.255.255.0 vpn_gateway --route {paladins9} 255.0.0.0 vpn_gateway --route {paladins10} 255.0.0.0 vpn_gateway --route {paladins11} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void paladinsoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {paladins} 255.255.0.0 vpn_gateway --route {paladins2} 255.255.0.0 vpn_gateway --route {paladins3} 255.255.0.0 vpn_gateway --route {paladins4} 255.255.0.0 vpn_gateway --route {paladins5} 255.0.0.0 vpn_gateway --route {paladins6} 255.0.0.0 vpn_gateway --route {paladins7} 255.255.255.0 vpn_gateway --route {paladins8} 255.255.255.0 vpn_gateway --route {paladins9} 255.0.0.0 vpn_gateway --route {paladins10} 255.0.0.0 vpn_gateway --route {paladins11} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void paladinsu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {paladins} 255.255.0.0 vpn_gateway --route {paladins2} 255.255.0.0 vpn_gateway --route {paladins3} 255.255.0.0 vpn_gateway --route {paladins4} 255.255.0.0 vpn_gateway --route {paladins5} 255.0.0.0 vpn_gateway --route {paladins6} 255.0.0.0 vpn_gateway --route {paladins7} 255.255.255.0 vpn_gateway --route {paladins8} 255.255.255.0 vpn_gateway --route {paladins9} 255.0.0.0 vpn_gateway --route {paladins10} 255.0.0.0 vpn_gateway --route {paladins11} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void paladinstl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {paladins} 255.255.0.0 vpn_gateway --route {paladins2} 255.255.0.0 vpn_gateway --route {paladins3} 255.255.0.0 vpn_gateway --route {paladins4} 255.255.0.0 vpn_gateway --route {paladins5} 255.0.0.0 vpn_gateway --route {paladins6} 255.0.0.0 vpn_gateway --route {paladins7} 255.255.255.0 vpn_gateway --route {paladins8} 255.255.255.0 vpn_gateway --route {paladins9} 255.0.0.0 vpn_gateway --route {paladins10} 255.0.0.0 vpn_gateway --route {paladins11} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void readyornotsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {readyornot} 255.255.0.0 vpn_gateway --route {readyornot2} 255.255.0.0 vpn_gateway --route {readyornot3} 255.255.0.0 vpn_gateway --route {readyornot4} 255.255.0.0 vpn_gateway --route {readyornot5} 255.255.0.0 vpn_gateway --route {readyornot6} 255.255.0.0 vpn_gateway --route {readyornot7} 255.255.0.0 vpn_gateway --route {readyornot8} 255.255.0.0 vpn_gateway --route {readyornot9} 255.255.0.0 vpn_gateway --route {readyornot10} 255.255.0.0 vpn_gateway --route {readyornot11} 255.255.0.0 vpn_gateway --route {readyornot12} 255.255.0.0 vpn_gateway --route {readyornot13} 255.255.0.0 vpn_gateway --route {readyornot14} 255.255.0.0 vpn_gateway --route {readyornot15} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void readyornotoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {readyornot} 255.255.0.0 vpn_gateway --route {readyornot2} 255.255.0.0 vpn_gateway --route {readyornot3} 255.255.0.0 vpn_gateway --route {readyornot4} 255.255.0.0 vpn_gateway --route {readyornot5} 255.255.0.0 vpn_gateway --route {readyornot6} 255.255.0.0 vpn_gateway --route {readyornot7} 255.255.0.0 vpn_gateway --route {readyornot8} 255.255.0.0 vpn_gateway --route {readyornot9} 255.255.0.0 vpn_gateway --route {readyornot10} 255.255.0.0 vpn_gateway --route {readyornot11} 255.255.0.0 vpn_gateway --route {readyornot12} 255.255.0.0 vpn_gateway --route {readyornot13} 255.255.0.0 vpn_gateway --route {readyornot14} 255.255.0.0 vpn_gateway --route {readyornot15} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void readyornotu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {readyornot} 255.255.0.0 vpn_gateway --route {readyornot2} 255.255.0.0 vpn_gateway --route {readyornot3} 255.255.0.0 vpn_gateway --route {readyornot4} 255.255.0.0 vpn_gateway --route {readyornot5} 255.255.0.0 vpn_gateway --route {readyornot6} 255.255.0.0 vpn_gateway --route {readyornot7} 255.255.0.0 vpn_gateway --route {readyornot8} 255.255.0.0 vpn_gateway --route {readyornot9} 255.255.0.0 vpn_gateway --route {readyornot10} 255.255.0.0 vpn_gateway --route {readyornot11} 255.255.0.0 vpn_gateway --route {readyornot12} 255.255.0.0 vpn_gateway --route {readyornot13} 255.255.0.0 vpn_gateway --route {readyornot14} 255.255.0.0 vpn_gateway --route {readyornot15} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void readyornottl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {readyornot} 255.255.0.0 vpn_gateway --route {readyornot2} 255.255.0.0 vpn_gateway --route {readyornot3} 255.255.0.0 vpn_gateway --route {readyornot4} 255.255.0.0 vpn_gateway --route {readyornot5} 255.255.0.0 vpn_gateway --route {readyornot6} 255.255.0.0 vpn_gateway --route {readyornot7} 255.255.0.0 vpn_gateway --route {readyornot8} 255.255.0.0 vpn_gateway --route {readyornot9} 255.255.0.0 vpn_gateway --route {readyornot10} 255.255.0.0 vpn_gateway --route {readyornot11} 255.255.0.0 vpn_gateway --route {readyornot12} 255.255.0.0 vpn_gateway --route {readyornot13} 255.255.0.0 vpn_gateway --route {readyornot14} 255.255.0.0 vpn_gateway --route {readyornot15} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void mythofempiressh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mythofempires} 255.255.0.0 vpn_gateway --route {mythofempires2} 255.0.0.0 vpn_gateway --route {mythofempires3} 255.255.0.0 vpn_gateway --route {mythofempires4} 255.255.0.0 vpn_gateway --route {mythofempires5} 255.255.0.0 vpn_gateway --route {mythofempires6} 255.255.0.0 vpn_gateway --route {mythofempires7} 255.255.0.0 vpn_gateway --route {mythofempires8} 255.255.0.0 vpn_gateway --route {mythofempires9} 255.0.0.0 vpn_gateway --route {mythofempires10} 255.255.0.0 vpn_gateway --route {mythofempires11} 255.255.0.0 vpn_gateway --route {mythofempires12} 255.255.0.0 vpn_gateway --route {mythofempires13} 255.255.0.0 vpn_gateway --route {mythofempires14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mythofempiresoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mythofempires} 255.255.0.0 vpn_gateway --route {mythofempires2} 255.0.0.0 vpn_gateway --route {mythofempires3} 255.255.0.0 vpn_gateway --route {mythofempires4} 255.255.0.0 vpn_gateway --route {mythofempires5} 255.255.0.0 vpn_gateway --route {mythofempires6} 255.255.0.0 vpn_gateway --route {mythofempires7} 255.255.0.0 vpn_gateway --route {mythofempires8} 255.255.0.0 vpn_gateway --route {mythofempires9} 255.0.0.0 vpn_gateway --route {mythofempires10} 255.255.0.0 vpn_gateway --route {mythofempires11} 255.255.0.0 vpn_gateway --route {mythofempires12} 255.255.0.0 vpn_gateway --route {mythofempires13} 255.255.0.0 vpn_gateway --route {mythofempires14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mythofempiresu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {mythofempires} 255.255.0.0 vpn_gateway --route {mythofempires2} 255.0.0.0 vpn_gateway --route {mythofempires3} 255.255.0.0 vpn_gateway --route {mythofempires4} 255.255.0.0 vpn_gateway --route {mythofempires5} 255.255.0.0 vpn_gateway --route {mythofempires6} 255.255.0.0 vpn_gateway --route {mythofempires7} 255.255.0.0 vpn_gateway --route {mythofempires8} 255.255.0.0 vpn_gateway --route {mythofempires9} 255.0.0.0 vpn_gateway --route {mythofempires10} 255.255.0.0 vpn_gateway --route {mythofempires11} 255.255.0.0 vpn_gateway --route {mythofempires12} 255.255.0.0 vpn_gateway --route {mythofempires13} 255.255.0.0 vpn_gateway --route {mythofempires14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void mythofempirestl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {mythofempires} 255.255.0.0 vpn_gateway --route {mythofempires2} 255.0.0.0 vpn_gateway --route {mythofempires3} 255.255.0.0 vpn_gateway --route {mythofempires4} 255.255.0.0 vpn_gateway --route {mythofempires5} 255.255.0.0 vpn_gateway --route {mythofempires6} 255.255.0.0 vpn_gateway --route {mythofempires7} 255.255.0.0 vpn_gateway --route {mythofempires8} 255.255.0.0 vpn_gateway --route {mythofempires9} 255.0.0.0 vpn_gateway --route {mythofempires10} 255.255.0.0 vpn_gateway --route {mythofempires11} 255.255.0.0 vpn_gateway --route {mythofempires12} 255.255.0.0 vpn_gateway --route {mythofempires13} 255.255.0.0 vpn_gateway --route {mythofempires14} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void predecessorsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {predecessor} 255.255.0.0 vpn_gateway --route {predecessor2} 255.0.0.0 vpn_gateway --route {predecessor3} 255.255.0.0 vpn_gateway --route {predecessor4} 255.255.0.0 vpn_gateway --route {predecessor5} 255.0.0.0 vpn_gateway --route {predecessor6} 255.255.0.0 vpn_gateway --route {predecessor7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void predecessoroh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {predecessor} 255.255.0.0 vpn_gateway --route {predecessor2} 255.0.0.0 vpn_gateway --route {predecessor3} 255.255.0.0 vpn_gateway --route {predecessor4} 255.255.0.0 vpn_gateway --route {predecessor5} 255.0.0.0 vpn_gateway --route {predecessor6} 255.255.0.0 vpn_gateway --route {predecessor7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void predecessoru()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {predecessor} 255.255.0.0 vpn_gateway --route {predecessor2} 255.0.0.0 vpn_gateway --route {predecessor3} 255.255.0.0 vpn_gateway --route {predecessor4} 255.255.0.0 vpn_gateway --route {predecessor5} 255.0.0.0 vpn_gateway --route {predecessor6} 255.255.0.0 vpn_gateway --route {predecessor7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void predecessortl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {predecessor} 255.255.0.0 vpn_gateway --route {predecessor2} 255.0.0.0 vpn_gateway --route {predecessor3} 255.255.0.0 vpn_gateway --route {predecessor4} 255.255.0.0 vpn_gateway --route {predecessor5} 255.0.0.0 vpn_gateway --route {predecessor6} 255.255.0.0 vpn_gateway --route {predecessor7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void unturnedsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {unturned} 255.255.0.0 vpn_gateway --route {unturned2} 255.255.0.0 vpn_gateway --route {unturned3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void unturnedoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {unturned} 255.255.0.0 vpn_gateway --route {unturned2} 255.255.0.0 vpn_gateway --route {unturned3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void unturnedu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {unturned} 255.255.0.0 vpn_gateway --route {unturned2} 255.255.0.0 vpn_gateway --route {unturned3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void unturnedtl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {unturned} 255.255.0.0 vpn_gateway --route {unturned2} 255.255.0.0 vpn_gateway --route {unturned3} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void rustsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rust} 255.0.0.0 vpn_gateway --route {rust2} 255.0.0.0 vpn_gateway --route {rust3} 255.0.0.0 vpn_gateway --route {rust4} 255.0.0.0 vpn_gateway --route {rust5} 255.0.0.0 vpn_gateway --route {rust6} 255.0.0.0 vpn_gateway --route {rust7} 255.0.0.0 vpn_gateway --route {rust8} 255.0.0.0 vpn_gateway --route {rust9} 255.0.0.0 vpn_gateway --route {rust10} 255.0.0.0 vpn_gateway --route {rust11} 255.0.0.0 vpn_gateway --route {rust12} 255.0.0.0 vpn_gateway --route {rust13} 255.0.0.0 vpn_gateway --route {rust14} 255.0.0.0 vpn_gateway --route {rust15} 255.0.0.0 vpn_gateway --route {rust16} 255.0.0.0 vpn_gateway --route {rust17} 255.0.0.0 vpn_gateway --route {rust18} 255.0.0.0 vpn_gateway --route {rust19} 255.0.0.0 vpn_gateway --route {rust20} 255.0.0.0 vpn_gateway --route {rust21} 255.0.0.0 vpn_gateway --route {rust22} 255.0.0.0 vpn_gateway --route {rust23} 255.0.0.0 vpn_gateway --route {rust24} 255.0.0.0 vpn_gateway --route {rust25} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید سرورهای بازی راست بسته به درخواست کاربر ها به روبوپینگ اضافه میشود, پس اگر سرور شما تحریم هست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked

                                        eror.showdialog();
                                        ERROR.instance.errortext.Text = "توجه داشته باشید به علت زیاد بودن ای پی های این بازی شاید بعضی از قسمت های سیستم شما هم پروکسی شود";
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rustoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rust} 255.0.0.0 vpn_gateway --route {rust2} 255.0.0.0 vpn_gateway --route {rust3} 255.0.0.0 vpn_gateway --route {rust4} 255.0.0.0 vpn_gateway --route {rust5} 255.0.0.0 vpn_gateway --route {rust6} 255.0.0.0 vpn_gateway --route {rust7} 255.0.0.0 vpn_gateway --route {rust8} 255.0.0.0 vpn_gateway --route {rust9} 255.0.0.0 vpn_gateway --route {rust10} 255.0.0.0 vpn_gateway --route {rust11} 255.0.0.0 vpn_gateway --route {rust12} 255.0.0.0 vpn_gateway --route {rust13} 255.0.0.0 vpn_gateway --route {rust14} 255.0.0.0 vpn_gateway --route {rust15} 255.0.0.0 vpn_gateway --route {rust16} 255.0.0.0 vpn_gateway --route {rust17} 255.0.0.0 vpn_gateway --route {rust18} 255.0.0.0 vpn_gateway --route {rust19} 255.0.0.0 vpn_gateway --route {rust20} 255.0.0.0 vpn_gateway --route {rust21} 255.0.0.0 vpn_gateway --route {rust22} 255.0.0.0 vpn_gateway --route {rust23} 255.0.0.0 vpn_gateway --route {rust24} 255.0.0.0 vpn_gateway --route {rust25} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید سرورهای بازی راست بسته به درخواست کاربر ها به روبوپینگ اضافه میشود, پس اگر سرور شما تحریم هست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked

                                        eror.showdialog();
                                        ERROR.instance.errortext.Text = "توجه داشته باشید به علت زیاد بودن ای پی های این بازی شاید بعضی از قسمت های سیستم شما هم پروکسی شود";
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rustu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {whatisip} 255.255.0.0 net_gateway --route {rust} 255.0.0.0 vpn_gateway --route {rust2} 255.0.0.0 vpn_gateway --route {rust3} 255.0.0.0 vpn_gateway --route {rust4} 255.0.0.0 vpn_gateway --route {rust5} 255.0.0.0 vpn_gateway --route {rust6} 255.0.0.0 vpn_gateway --route {rust7} 255.0.0.0 vpn_gateway --route {rust8} 255.0.0.0 vpn_gateway --route {rust9} 255.0.0.0 vpn_gateway --route {rust10} 255.0.0.0 vpn_gateway --route {rust11} 255.0.0.0 vpn_gateway --route {rust12} 255.0.0.0 vpn_gateway --route {rust13} 255.0.0.0 vpn_gateway --route {rust14} 255.0.0.0 vpn_gateway --route {rust15} 255.0.0.0 vpn_gateway --route {rust16} 255.0.0.0 vpn_gateway --route {rust17} 255.0.0.0 vpn_gateway --route {rust18} 255.0.0.0 vpn_gateway --route {rust19} 255.0.0.0 vpn_gateway --route {rust20} 255.0.0.0 vpn_gateway --route {rust21} 255.0.0.0 vpn_gateway --route {rust22} 255.0.0.0 vpn_gateway --route {rust23} 255.0.0.0 vpn_gateway --route {rust24} 255.0.0.0 vpn_gateway --route {rust25} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید سرورهای بازی راست بسته به درخواست کاربر ها به روبوپینگ اضافه میشود, پس اگر سرور شما تحریم هست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked

                                        eror.showdialog();
                                        ERROR.instance.errortext.Text = "توجه داشته باشید به علت زیاد بودن ای پی های این بازی شاید بعضی از قسمت های سیستم شما هم پروکسی شود";
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void rusttl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {whatisip} 255.255.0.0 net_gateway --route {rust} 255.0.0.0 vpn_gateway --route {rust2} 255.0.0.0 vpn_gateway --route {rust3} 255.0.0.0 vpn_gateway --route {rust4} 255.0.0.0 vpn_gateway --route {rust5} 255.0.0.0 vpn_gateway --route {rust6} 255.0.0.0 vpn_gateway --route {rust7} 255.0.0.0 vpn_gateway --route {rust8} 255.0.0.0 vpn_gateway --route {rust9} 255.0.0.0 vpn_gateway --route {rust10} 255.0.0.0 vpn_gateway --route {rust11} 255.0.0.0 vpn_gateway --route {rust12} 255.0.0.0 vpn_gateway --route {rust13} 255.0.0.0 vpn_gateway --route {rust14} 255.0.0.0 vpn_gateway --route {rust15} 255.0.0.0 vpn_gateway --route {rust16} 255.0.0.0 vpn_gateway --route {rust17} 255.0.0.0 vpn_gateway --route {rust18} 255.0.0.0 vpn_gateway --route {rust19} 255.0.0.0 vpn_gateway --route {rust20} 255.0.0.0 vpn_gateway --route {rust21} 255.0.0.0 vpn_gateway --route {rust22} 255.0.0.0 vpn_gateway --route {rust23} 255.0.0.0 vpn_gateway --route {rust24} 255.0.0.0 vpn_gateway --route {rust25} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                        gameinfo.Text = "توجه کنید سرورهای بازی راست بسته به درخواست کاربر ها به روبوپینگ اضافه میشود, پس اگر سرور شما تحریم هست به پشتیبانی خبر بده";
                                        gameinfo.Visible = true;
                                        timer.Start(); // Start the timer when the button is clicked

                                        eror.showdialog();
                                        ERROR.instance.errortext.Text = "توجه داشته باشید به علت زیاد بودن ای پی های این بازی شاید بعضی از قسمت های سیستم شما هم پروکسی شود";

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void truckersmpsh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {truckersmp} 255.255.255.255 vpn_gateway --route {truckersmp2} 255.255.255.255 vpn_gateway --route {truckersmp3} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void truckersmpoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {truckersmp} 255.255.255.255 vpn_gateway --route {truckersmp2} 255.255.255.255 vpn_gateway --route {truckersmp3} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void truckersmpu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {truckersmp} 255.255.255.255 vpn_gateway --route {truckersmp2} 255.255.255.255 vpn_gateway --route {truckersmp3} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void truckersmptl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {truckersmp} 255.255.255.255 vpn_gateway --route {truckersmp2} 255.255.255.255 vpn_gateway --route {truckersmp3} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void pathofexile2sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pathofexile2oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pathofexile2u()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void pathofexile2tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void phasmophobiash()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {phasmophobia} 255.0.0.0 vpn_gateway --route {phasmophobia2} 255.0.0.0 vpn_gateway --route {phasmophobia3} 255.0.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void phasmophobiaoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {epic} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void phasmophobiau()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {epic} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void phasmophobiatl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {pathofexile2} 255.255.0.0 vpn_gateway --route {pathofexile21} 255.255.0.0 vpn_gateway --route {pathofexile22} 255.255.0.0 vpn_gateway --route {epic} 255.255.255.255 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }

        private async void fallguyssh()
        {
            if (broute1.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {fallguys} 255.255.0.0 vpn_gateway --route {fallguys2} 255.0.0.0 vpn_gateway --route {fallguys3} 255.0.0.0 vpn_gateway --route {fallguys4} 255.255.0.0 vpn_gateway --route {fallguys5} 255.255.0.0 vpn_gateway --route {fallguys6} 255.255.0.0 vpn_gateway --route {fallguys7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fallguysoh()
        {
            if (broute2.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {fallguys} 255.255.0.0 vpn_gateway --route {fallguys2} 255.0.0.0 vpn_gateway --route {fallguys3} 255.0.0.0 vpn_gateway --route {fallguys4} 255.255.0.0 vpn_gateway --route {fallguys5} 255.255.0.0 vpn_gateway --route {fallguys6} 255.255.0.0 vpn_gateway --route {fallguys7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fallguysu()
        {
            if (broute3.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();
                        // Start openvpn process asynchronously

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {fallguys} 255.255.0.0 vpn_gateway --route {fallguys2} 255.0.0.0 vpn_gateway --route {fallguys3} 255.0.0.0 vpn_gateway --route {fallguys4} 255.255.0.0 vpn_gateway --route {fallguys5} 255.255.0.0 vpn_gateway --route {fallguys6} 255.255.0.0 vpn_gateway --route {fallguys7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;
                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }
        private async void fallguystl()
        {
            if (broute4.Checked)
            {
                await Task.Run(() =>
                {

                    try
                    {
                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {fallguys} 255.255.0.0 vpn_gateway --route {fallguys2} 255.0.0.0 vpn_gateway --route {fallguys3} 255.0.0.0 vpn_gateway --route {fallguys4} 255.255.0.0 vpn_gateway --route {fallguys5} 255.255.0.0 vpn_gateway --route {fallguys6} 255.255.0.0 vpn_gateway --route {fallguys7} 255.255.0.0 vpn_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway";
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;// This is required to redirect standard output
                        openvpnStartInfo.RedirectStandardOutput = true; // Redirect standard output for reading
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");
                        guna2CircleButton4.Image = whitelogo;
                        guna2CircleButton4.BorderColor = Color.White;
                        guna2TextBox1.Visible = false;
                        guna2CircleProgressBar1.Value = 0;
                        guna2CircleProgressBar2.Value = 0;
                        guna2CircleButton4.BorderThickness = 2;

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";

                            Console.WriteLine("یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو");
                        }));
                    }
                });
            }
        }


        /// <summary>
        /// /////////////////////////////////////////////////////////////////////////////////////////////////////
        /// </summary>
        private async void sh()
        {
            if (broute1.Checked)
            {
                await Task.Run(async () =>
                {
                    try
                    {

                        List<RouteInfo> routes = await GetRoutesForGameFromServer(chosedgame);

                        if (routes == null || routes.Count == 0)
                        {
                            // Handle no routes or errors in fetching
                            MessageBox.Show("Unable to fetch routes for the selected game.");
                            return;
                        }

                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ssh://robo2.roboping.ir:9393?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();

                        // Build the OpenVPN arguments dynamically
                        string openvpnArguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.0.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway";

                        foreach (var route in routes)
                        {
                            openvpnArguments += $" --route {route.IP} {route.Subnet} {route.Gateway}";
                            // Store the route in the fetchedRoutes list for deletion later
                            fetchedRoutes.Add(route.IP);
                        }

                        // Start OpenVPN process with the new arguments
                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = openvpnArguments;
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;
                        openvpnStartInfo.RedirectStandardOutput = true;
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                        }));
                    }
                });
            }
        }
        private async void oh()
        {
            if (broute2.Checked)
            {
                await Task.Run(async () =>
                {
                    try
                    {

                        List<RouteInfo> routes = await GetRoutesForGameFromServer(chosedgame);

                        if (routes == null || routes.Count == 0)
                        {
                            // Handle no routes or errors in fetching
                            MessageBox.Show("Unable to fetch routes for the selected game.");
                            return;
                        }

                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();

                        // Build the OpenVPN arguments dynamically
                        string openvpnArguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.0.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway";

                        foreach (var route in routes)
                        {
                            openvpnArguments += $" --route {route.IP} {route.Subnet} {route.Gateway}";
                            // Store the route in the fetchedRoutes list for deletion later
                            fetchedRoutes.Add(route.IP);
                        }

                        // Start OpenVPN process with the new arguments
                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = openvpnArguments;
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;
                        openvpnStartInfo.RedirectStandardOutput = true;
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                        }));
                    }
                });
            }
        }
        private async void mtls()
        {
            if (broute3.Checked)
            {
                await Task.Run(async () =>
                {
                    try
                    {

                        List<RouteInfo> routes = await GetRoutesForGameFromServer(chosedgame);

                        if (routes == null || routes.Count == 0)
                        {
                            // Handle no routes or errors in fetching
                            MessageBox.Show("Unable to fetch routes for the selected game.");
                            return;
                        }

                        Process gostProcesss = new Process();
                        ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                        gostStartInfo.FileName = @"RP.exe";
                        gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ohttp+mtls://robo2.roboping.ir:400?crypt=sha256&udp=true&mode=fast&log?level=ERROR""";
                        gostStartInfo.Verb = "runas";
                        gostProcesss.StartInfo = gostStartInfo;
                        gostProcesss.Start();

                        // Build the OpenVPN arguments dynamically
                        string openvpnArguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.0.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway";

                        foreach (var route in routes)
                        {
                            openvpnArguments += $" --route {route.IP} {route.Subnet} {route.Gateway}";
                            // Store the route in the fetchedRoutes list for deletion later
                            fetchedRoutes.Add(route.IP);
                        }

                        // Start OpenVPN process with the new arguments
                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = openvpnArguments;
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;
                        openvpnStartInfo.RedirectStandardOutput = true;
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                        }));
                    }
                });
            }
        }
        private async void tl()
        {
            if (broute4.Checked)
            {
                await Task.Run(async () =>
                {
                    try
                    {
                        MessageBox.Show(chosedgame);

                        List<RouteInfo> routes = await GetRoutesForGameFromServer(chosedgame);

                        if (routes == null || routes.Count == 0)
                        {
                            // Handle no routes or errors in fetching
                            MessageBox.Show("Unable to fetch routes for the selected game.");
                            return;
                        }

                        Process stunnelProcess = new Process();
                        ProcessStartInfo stunnelStartInfo = new ProcessStartInfo();
                        stunnelStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        stunnelStartInfo.CreateNoWindow = true;
                        stunnelStartInfo.FileName = @"RPT.exe";
                        stunnelStartInfo.Arguments = @"--config stunnel.conf";
                        stunnelStartInfo.Verb = "runas";
                        stunnelProcess.StartInfo = stunnelStartInfo;
                        stunnelProcess.Start();

                        // Build the OpenVPN arguments dynamically
                        string openvpnArguments = $@"--config Roboping.config --remote 127.0.0.1 6143 --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.0.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway";

                        foreach (var route in routes)
                        {
                            openvpnArguments += $" --route {route.IP} {route.Subnet} {route.Gateway}";
                            // Store the route in the fetchedRoutes list for deletion later
                            fetchedRoutes.Add(route.IP);
                        }

                        // Start OpenVPN process with the new arguments
                        Process openvpnProcess = new Process();
                        ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                        openvpnStartInfo.FileName = @"RPO.exe";
                        openvpnStartInfo.Arguments = openvpnArguments;
                        openvpnStartInfo.Verb = "runas";
                        openvpnStartInfo.UseShellExecute = false;
                        openvpnStartInfo.RedirectStandardOutput = true;
                        openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        openvpnProcess.StartInfo = openvpnStartInfo;

                        openvpnProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                        {
                            if (e.Data != null)
                            {
                                Console.WriteLine(e.Data); // Print the output of the process
                                                           //MessageBox.Show(e.Data);
                                                           // Check if the required string is present in the output
                                if (e.Data.Contains("Initialization Sequence Completed"))
                                {
                                    Invoke(new MethodInvoker(delegate
                                    {
                                        guna2CircleButton4.Image = mainlogo;
                                        guna2CircleButton4.BorderColor = Color.FromArgb(0, 176, 176);
                                        guna2TextBox1.Text = "Routed";
                                        guna2CircleProgressBar1.Value = 0;
                                        guna2CircleProgressBar2.Value = 0;
                                        guna2CircleButton4.BorderThickness = 2;
                                        count = true;

                                    }));
                                }
                            }
                        });

                        openvpnProcess.StartInfo.UseShellExecute = false;
                        openvpnProcess.StartInfo.CreateNoWindow = true; // Ensure the Command Prompt window is hidden
                        openvpnProcess.Start();
                        openvpnProcess.BeginOutputReadLine(); // Begin asynchronous read of the output

                        openvpnProcess.WaitForExit(); // Wait for the process to exit
                    }
                    catch (Exception)
                    {
                        KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                        this.Invoke(new Action(async () =>
                        {
                            eror.showdialog();
                            ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                        }));
                    }
                });
            }
        }

        /// <summary>
        /// ///////////////////////////////////////////////////////////////////////////////////
        /// </summary>


        private void Timer_Tick(object sender, EventArgs e)
        {
            gameinfo.Visible = false; // Hide the button
            timer.Stop(); // Stop the timer
        }

        void KillProcessWithAdminPrivileges(Process process)
        {
            // Create a new process info object with "runas" verb
            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = "taskkill";
            psi.Arguments = $"/F /PID {process.Id}";
            psi.Verb = "runas";
            psi.WindowStyle = ProcessWindowStyle.Hidden;

            // Start the process with admin privileges
            Process.Start(psi)?.WaitForExit();
        }
        public void KillProcessesWithNames(params string[] processNames)
        {
            foreach (var name in processNames)
            {
                foreach (var p in Process.GetProcessesByName(name))
                {
                    KillProcessWithAdminPrivileges(p);
                    break;
                }
            }
        }


        public void Closeroute2()
        {
            try
            {
                // Loop through the dynamically fetched routes
                foreach (var route in fetchedRoutes)
                {
                    Process removeRouteProcess = new Process();
                    ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                    removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    removeRouteStartInfo.FileName = "route";
                    removeRouteStartInfo.Arguments = $"delete {route}";
                    removeRouteStartInfo.Verb = "runas";
                    removeRouteProcess.StartInfo = removeRouteStartInfo;
                    removeRouteProcess.Start();
                    removeRouteProcess.WaitForExit();
                }

                // Optionally clear the fetchedRoutes list after deletion
                fetchedRoutes.Clear();

                MessageBox.Show("Routes removed successfully.");
            }
            catch
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
            }
            try
            {
                // Remove the default route
                Process removeDefaultRouteProcess = new Process();
                ProcessStartInfo removeDefaultRouteStartInfo = new ProcessStartInfo();
                removeDefaultRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                removeDefaultRouteStartInfo.FileName = "route";
                removeDefaultRouteStartInfo.Arguments = $"delete 0.0.0.0 MASK 192.0.0.0";
                removeDefaultRouteStartInfo.Verb = "runas";
                removeDefaultRouteProcess.StartInfo = removeDefaultRouteStartInfo;
                removeDefaultRouteProcess.Start();
                removeDefaultRouteProcess.WaitForExit();
            }
            catch
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
            }
            string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, whatisip };
            try
            {
                // Loop through the specific routes
                for (int i = 0; i < esoroutes.Length; i++)
                {
                    Process removeRouteProcess = new Process();
                    ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                    removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    removeRouteStartInfo.FileName = "route";
                    removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                    removeRouteStartInfo.Verb = "runas";
                    removeRouteProcess.StartInfo = removeRouteStartInfo;
                    removeRouteProcess.Start();
                    removeRouteProcess.WaitForExit();
                }
            }
            catch
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
            }

        }


            public void Closeroute()
        {

            if (Games.instance.elderscrollsonline.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, esoroute1 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";

                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.conanexiles.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, conanroute1, conanroute2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.scum.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, scum1, scum2, scum3, scum4, scum5, scum6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.chivalry2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, chiv1, chiv2, chiv3, chiv4, chiv5, chiv6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.forhonor.Checked || Games.instance.Ubisoft.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, forhonor1, ubisoft1, ubisoft2, ubisoft3, ubisoft4, ubisoft5, ubisoft6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.squad.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, squad1 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.rainbowsixsiege.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, r61, r62, r63, r64, r65, r66, r67, r68, r69, r610, r611, r612, r613, r614, r615, ubisoft1, ubisoft2, ubisoft3, ubisoft4, ubisoft5, ubisoft6, r616, r617, r618 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.counterstrike2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, cs21, cs22, cs23, cs24, cs25 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.huntshowdown.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, hunt, hunt2, hunt3, hunt4, hunt5, hunt6, hunt7, hunt8, hunt9, hunt10, hunt11, hunt12, hunt13, hunt14, hunt15 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.discord.Checked || Games.instance.spotify.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.battlefield4.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ea, ea2, ea3, ea4, ea5, ea6, ea7, ea8, bf41, bf42, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.apex.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ea, ea2, ea3, ea4, ea5, ea6, ea7, ea8, apex, apex2, apex3, apex4, apex5, apex6, apex7, apex8, apex9, apex10, apex11, whatisip, apex12, apex13, apex14, apex15, apex16, apex17, apex18, apex19, eaanticheat, eaanticheat2, eaanticheat3 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.xdefiant.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, xdef1, xdef2, xdef3, xdef4, xdef5, xdef6, xdef7, xdef8, xdef9, xdef10, xdef11 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.leagueoflegends.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, riot, riot2, LOL, LOL2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.valorant.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, riot, riot2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.reddeadredemption.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, rdr21, rdr22, rdr23, rockstar1, rockstar2, rockstar3, rockstar4, rockstar5, rockstar6, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.gtavgrandtheftautov.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, rockstar1, rockstar2, rockstar3, rockstar4, rockstar5, rockstar6, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.multiversus.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, mvs1, mvs2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.seaofthieves.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ara, ara2, ara3, ara4, ara5, ara6, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.epicgames.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, rage2, rage, epic, rockstar1, rockstar2, rockstar3, rockstar4, rockstar5, rockstar6, whatisip, hellletloose, hellletloose2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.pubgbattlegrounds.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, pubg, pubg2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.eaapp.Checked || Games.instance.battlefield3.Checked || Games.instance.battlefield4.Checked || Games.instance.battlefield1.Checked || Games.instance.battlefieldv.Checked || Games.instance.fc24.Checked || Games.instance.fifa23.Checked || Games.instance.fc25.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ea, ea2, ea3, ea4, ea5, ea6, ea7, ea8, ea9, whatisip, eaanticheat, eaanticheat2, eaanticheat3, fc25, fc252, fc253 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.battlefield2042.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ea, ea2, ea3, ea4, ea5, ea6, ea7, ea8, bf2042, whatisip, eaanticheat, eaanticheat2, bf20422, bf20423, bf20424, bf20425, bf20426, bf20427, bf20428 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.dayz.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, dayz, dayz2, dayz3, dayz4, dayz5, dayz6, dayz7, dayz8 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.thefinals.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, final, final2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.fivem.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, fivem, fivem2, fivem3, fivem4, fivem5, fivem6, fivem7, fivem8, fivem9, fivem10, fivem11, fivem12, fivem13, fivem14, fivem15, fivem16, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.rage.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, rage, rage2, rockstar1, rockstar2, rockstar3, rockstar4, rockstar5, rockstar6, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.narakabladepoint.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, naraka1, naraka2, naraka3, naraka4, naraka5, naraka6, naraka7, naraka8 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.fortnite.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, fortnite1, fortnite2, fortnite3, fortnite4, fortnite5, fortnite6, fortnite7, fortnite8, fortnite9, fortnite10, fortnite11, whatisip, fortnite12 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.oncehuman.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, oncehuman1, oncehuman2, oncehuman3, oncehuman4, oncehuman5 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.faceit.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, faceit1, faceit2, faceit3, faceit4, faceit5, faceit6, faceit7, faceit8, faceit9, faceit10, faceit11, faceit12, faceit13, faceit14, faceit15, faceit16, faceit17, faceit18, faceit19 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.starcitizen.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, starcitizen1, starcitizen2, starcitizen3, starcitizen4, starcitizen5, starcitizen6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.raidshadowlegends.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, raidshadow1, raidshadow2, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.newworld.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, newworld1, newworld2, newworld3, newworld4, newworld5, newworld6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.arenabreakout.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, arenabreakout, arenabreakout2, arenabreakout3, arenabreakout4, arenabreakout5, arenabreakout6, arenabreakout7 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.deltaforce.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, arenabreakout, arenabreakout2, arenabreakout3, arenabreakout4, arenabreakout5, arenabreakout6, arenabreakout7, arenabreakout8, arenabreakout9, arenabreakout10 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.forzahorizen5.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, forza5, forza52, forza53, forza54, forza55, forza56, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.warframe.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, forza5, fortnite1 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.knightsofhonor.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, koh, koh1, koh2, koh3, koh4, koh5, koh6, koh7, epic };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.spacemarine2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, space, space2, space3, space4, space5, space6, space7, space8, space9, space10, epic, space11, space12, space13, space14, space15, space16, space17, space18, space19, space20, space21, space22 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.overwatch2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, overwatch, overwatch2, overwatch3, overwatch4, overwatch5, overwatch6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.genshinimpact.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, genshin, genshin2, genshin3, genshin4, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.ageofmythology.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, mythology, mythology2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.rocketleague.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, rage2, rage, epic, rockstar1, rockstar2, rockstar3, rockstar4, rockstar5, rockstar6, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.dota2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, dota, dota1, dota2, dota3, dota4, dota5, dota6, dota7, dota8, dota9, dota10, dota11, dota12, dota13, dota14 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.arahistoryuntold.Checked || Games.instance.ageofempires4.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ara, ara2, ara3, ara4, ara5, ara6, whatisip };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.xbox.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ubisoft1, ubisoft2, ubisoft3, ubisoft4, ubisoft5, ubisoft6, ea, ea2, ea3, ea6, ea8, ea9, wow, wow2, wow3, wow4, wow5, wow7, wow8, ara3, ara4, ara5, ara6, whatisip, fc25, fc252, fc253 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.worldofwarcraft.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, wow, wow2, wow3, wow4, wow5, wow6, wow7, wow8 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.crusaderkings3.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ck, ck1, ck2, ck3, ck4, ck5, ck6, ck7 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.nvidia.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, nvidia, nvidia2, nvidia3, nvidia4, nvidia5 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.farmingsimulator2022.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, fs221, fs222, fs223, fs224, fs225, fs226, fs227, fs228, fs229, fs2210, fs2211, fs2212, epic };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.cod6.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, cod1, cod2, cod3, cod4, cod5, cod6, cod7, cod8, ara, ara2, ara3, ara4, ara5, ara6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.battlenet.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, wow, wow2, wow3, wow4, wow5, wow6, wow7, wow8 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.codwarzone.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, cod1, cod2, cod3, cod4, cod5, cod6, cod7, cod8, ara, ara2, ara3, ara4, ara5, ara6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.offthegrid.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, ofthegrid1, ofthegrid2, ofthegrid3, ofthegrid4, ofthegrid5, ofthegrid6, ofthegrid7, ofthegrid8 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.marvelrivals.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, marvel1, marvel2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.companyofheroes2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, coh21, coh22, coh23, coh24 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.companyofheroes3.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, coh31, coh32, coh33 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.darkdanddarker.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, darkanddarker1, darkanddarker2, darkanddarker3, darkanddarker4, darkanddarker5, darkanddarker6, darkanddarker7, darkanddarker8, darkanddarker9, darkanddarker10 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.destiny2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, destiny21, destiny22, destiny23, destiny24, destiny25, destiny26, destiny27 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.lostark.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, lostark1, lostark2, lostark3, lostark4 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.steeldivision2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, steeldivision2 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.lordoftheringsonline.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, lotronline1, lotronline12 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.throneandliberty.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, throneandliberty1, throneandliberty2, throneandliberty3, throneandliberty4, throneandliberty5 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.threekingdoms.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, threekingdom1, threekingdom2, threekingdom3, threekingdom4, threekingdom5, threekingdom6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.warhammer3.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, warhammer31, warhammer32, warhammer33, warhammer34, warhammer35, warhammer36 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.vrchat.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, vrchat1, vrchat2, vrchat3, vrchat4 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.helldivers2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, helldivers1, helldivers2, helldivers3, helldivers5, helldivers6, helldivers7 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.efootball.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, efootball1, efootball2, efootball3, efootball4, efootball5, efootball6, efootball7, efootball8, efootball9, efootball10 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.amongus.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, amongus, amongus2, amongus3, amongus4, amongus5, amongus6, amongus7 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.deadbydaylight2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, deadbydaylight, deadbydaylight2, deadbydaylight3, deadbydaylight4, deadbydaylight5, deadbydaylight6, deadbydaylight7, deadbydaylight8 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.deadlock.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, deadlock, deadlock2, deadlock3, deadlock4, deadlock5 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.insurgencysandstorm.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, insurgencysandstorm, insurgencysandstorm1, insurgencysandstorm2, insurgencysandstorm3, insurgencysandstorm4, insurgencysandstorm5, insurgencysandstorm6, insurgencysandstorm7, insurgencysandstorm8, insurgencysandstorm9 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.warthunder.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, warthunder, warthunder2, warthunder3, warthunder4, warthunder5, warthunder6 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.paladins.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, paladins, paladins2, paladins3, paladins4, paladins5, paladins6, paladins7, paladins8, paladins9, paladins10, paladins11 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.readyornot.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, readyornot, readyornot2, readyornot3, readyornot4, readyornot5, readyornot6, readyornot7, readyornot8, readyornot9, readyornot10, readyornot11, readyornot12, readyornot13, readyornot14, readyornot15 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.mythofempires.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, mythofempires, mythofempires2, mythofempires3, mythofempires4, mythofempires5, mythofempires6, mythofempires7, mythofempires8, mythofempires9, mythofempires10, mythofempires11, mythofempires12, mythofempires13, mythofempires14 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.predecessor.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, predecessor, predecessor2, predecessor3, predecessor4, predecessor5, predecessor6, predecessor7 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.unturned.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, unturned, unturned2, unturned3 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.rust.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, rust, rust2, rust3, rust4, rust5, rust6, rust7, rust8, rust9, rust10, rust11, rust12, rust13, rust14, rust15, rust16, rust17, rust18, rust19, rust20, rust21, whatisip, rust22, rust23, rust24, rust25 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.truckersmp.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, truckersmp, truckersmp2, truckersmp3 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.pathofexile2.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, pathofexile2, pathofexile21, pathofexile22 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.phasmophobia.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, phasmophobia, phasmophobia2, phasmophobia3 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            if (Games.instance.fallguys.Checked)
            {
                string[] esoroutes = new string[] { route2, route3, route4, spotify1, spotify2, spotify3, spotify4, discordroute1, discordroute2, discordroute3, discordroute4, discordroute5, discordroute6, discordroute7, discordroute8, youtube, youtube2, youtube3, fallguys, fallguys2, fallguys3, fallguys4, fallguys5, fallguys6, fallguys7 };
                try
                {
                    // Loop through the specific routes
                    for (int i = 0; i < esoroutes.Length; i++)
                    {
                        Process removeRouteProcess = new Process();
                        ProcessStartInfo removeRouteStartInfo = new ProcessStartInfo();
                        removeRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        removeRouteStartInfo.FileName = "route";
                        removeRouteStartInfo.Arguments = $"delete {esoroutes[i]}";
                        removeRouteStartInfo.Verb = "runas";
                        removeRouteProcess.StartInfo = removeRouteStartInfo;
                        removeRouteProcess.Start();
                        removeRouteProcess.WaitForExit();
                    }
                }
                catch
                {
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                    Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
                }
            }
            try
            {
                // Remove the default route
                Process removeDefaultRouteProcess = new Process();
                ProcessStartInfo removeDefaultRouteStartInfo = new ProcessStartInfo();
                removeDefaultRouteStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                removeDefaultRouteStartInfo.FileName = "route";
                removeDefaultRouteStartInfo.Arguments = $"delete 0.0.0.0 MASK 192.0.0.0";
                removeDefaultRouteStartInfo.Verb = "runas";
                removeDefaultRouteProcess.StartInfo = removeDefaultRouteStartInfo;
                removeDefaultRouteProcess.Start();
                removeDefaultRouteProcess.WaitForExit();
            }
            catch
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "روت ها درست بسته نشدن به پشتیبانی خبر بده";
                Console.WriteLine("روت ها درست بسته نشدن به پشتیبانی خبر بده");
            }

        }

        private void Main_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (isSessionActive1 == true)
            {
                SessionStop();
            }

            Closeroute();

            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

            Environment.Exit(1);

        }

        private void Main_Click(object sender, EventArgs e)
        {
            this.ActiveControl = null;
        }

        private void Main_FormClosed(object sender, FormClosedEventArgs e)
        {
            /*
            if (isSessionActive1 == true)
            {
                SessionStop();
            }

            Closeroute();

            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

            Environment.Exit(1);
            */
        }

        /*
        private void label12_Click(object sender, EventArgs e)
        {
            if (sender is Label label && label.Name == "label12")
            {
                if (!string.IsNullOrEmpty(label.Text))
                {
                    Clipboard.SetText(label.Text);
                    eror.showdialog();
                    ERROR.instance.errortext.Text = "USER ID Copied";
                }
            }
        }
        */

        private void searchgame_MouseDown(object sender, MouseEventArgs e)
        {
            //this.ActiveControl = null; // This will move focus away from the TextBox
        }

        // Add a boolean flag to track the current state
        private bool isMessageVisible = false;
        private void guna2CircleButton7_Click(object sender, EventArgs e)
        {

            if (!isMessageVisible)
            {
                // Show the message and buttons
                DisplayCurrentMessage();
                leftside.Visible = true;
                rightside.Visible = true;
                isMessageVisible = true; // Update the flag
            }
            else
            {
                // Hide the message and buttons
                gameinfo.Visible = false;
                leftside.Visible = false;
                rightside.Visible = false;
                isMessageVisible = false; // Update the flag
            }
        }

        private List<string> messages; // List to store messages
        private int currentIndex = 0;  // Tracks the current message index
        private void InitializeMessages()
        {
            // Initialize the list of messages
            messages = new List<string>
            {
                 "ممنون از اینکه کتاب راهنما رو باز کردی بیا بهت طریقه استفاده ام رو بهت بگم ",
                 " اول از همه نیازه یکی از روت های من رو انتخاب کنی که توضیح هرکدوم روی خودش هست فقط کافیه با موس بری روش",
                 "دوما نیازه بری بازی و یا نرم افزار مورد استفادتو از لیست بازی ها از منوی سمت چپ انتخاب کنی ",
                 "اینجا دیگه کار تمومه, فقط به صفحه اصلی میای و دکمه اتصال که لوگو خودمم روشه رو میزنی, بوووم, الان میتونی از بازی لذتشو ببری, تازه اینم بگم",
                 " هر بازی و نرم افزاری که تو لیسته انتخاب کنی دیسکورد و اسپاتیفای هم برات باز میشه دیگه منتظر چی هستی ؟ برو لذتشو ببر",
                 "برای دیدن آموزش های تصویری هم فقط کافیه از منو درباره ما در سمت چپ وارد آپارات من بشی"
            };
        }
        private void DisplayCurrentMessage()
        {
            // Safeguard to avoid index out-of-range issues
            if (currentIndex < 0 || currentIndex >= messages.Count)
                return;

            // Display the current message
            gameinfo.Invoke((Action)(() =>
            {


                gameinfo.Text = messages[currentIndex];
                gameinfo.Visible = true;
            }));
        }

        private void guna2Button5_Click_1(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                guna2Panel1.FillColor = Color.FromArgb(11, 12, 16);
                searchgame.Visible = false;
                mainpanel.Visible = false;
                setting.Visible = true;
                //about.Visible = false;
                games.Visible = false;
            }));
        }

        private void rightside_Click_1(object sender, EventArgs e)
        {
            // Go to the next message
            if (currentIndex < messages.Count - 1)
            {
                currentIndex++;
                DisplayCurrentMessage();
            }
        }

        private void leftside_Click_1(object sender, EventArgs e)
        {
            // Go to the previous message
            if (currentIndex > 0)
            {
                currentIndex--;
                DisplayCurrentMessage();
            }
        }

        private async void guna2CircleButton4_Click_1(object sender, EventArgs e)
        {
            gameinfo.Invoke((Action)(() =>
            {
                // Hide the message and buttons
                gameinfo.Visible = false;
                leftside.Visible = false;
                rightside.Visible = false;
                isMessageVisible = false; // Update the flag
            }));

            timer2 = new System.Windows.Forms.Timer();
            timer2.Interval = 300000; // 6 minutes
            timer2.Tick += Timer_Tick2;


            if (!isRunning2)
            {
                // Start the timer to continuously update the ping
                timer2.Start();
                isRunning2 = true;
            }
            else
            {
                isRunning2 = false;
            }
            /*
            string username = usernamefirst.Text;

            if (string.IsNullOrWhiteSpace(username))
            {
                MessageBox.Show("ای دی رو پیدا نمیکنم به پشتیبانی خبر بده");

                Console.WriteLine("ای دی رو پیدا نمیکنم به پشتیبانی خبر بده");

                return;
            }
            */
            //  string response = SendUsernameToServer(username);

            // Check server response

            // Parse the JSON response
            //  var jsonResponse = JsonConvert.DeserializeObject<Dictionary<string, string>>(response);

            if (Games.instance.arenabreakout.Checked || Games.instance.arahistoryuntold.Checked || Games.instance.apex.Checked || Games.instance.ageofmythology.Checked || Games.instance.battlefield3.Checked || Games.instance.battlefield4.Checked || Games.instance.battlefield1.Checked || Games.instance.battlefieldv.Checked || Games.instance.battlefield2042.Checked || Games.instance.chivalry2.Checked || Games.instance.conanexiles.Checked || Games.instance.counterstrike2.Checked || Games.instance.crusaderkings3.Checked || Games.instance.deltaforce.Checked || Games.instance.dayz.Checked || Games.instance.dota2.Checked || Games.instance.elderscrollsonline.Checked || Games.instance.forzahorizen5.Checked || Games.instance.fortnite.Checked || Games.instance.forhonor.Checked || Games.instance.fc24.Checked || Games.instance.fc25.Checked || Games.instance.fifa23.Checked || Games.instance.gtavgrandtheftautov.Checked || Games.instance.genshinimpact.Checked || Games.instance.huntshowdown.Checked || Games.instance.knightsofhonor.Checked || Games.instance.leagueoflegends.Checked || Games.instance.multiversus.Checked || Games.instance.narakabladepoint.Checked || Games.instance.newworld.Checked || Games.instance.oncehuman.Checked || Games.instance.overwatch2.Checked || Games.instance.pubgbattlegrounds.Checked || Games.instance.rainbowsixsiege.Checked || Games.instance.reddeadredemption.Checked || Games.instance.raidshadowlegends.Checked || Games.instance.rocketleague.Checked || Games.instance.scum.Checked || Games.instance.spacemarine2.Checked || Games.instance.squad.Checked || Games.instance.starcitizen.Checked || Games.instance.seaofthieves.Checked || Games.instance.thefinals.Checked || Games.instance.valorant.Checked || Games.instance.warframe.Checked || Games.instance.worldofwarcraft.Checked || Games.instance.xdefiant.Checked || Games.instance.discord.Checked || Games.instance.eaapp.Checked || Games.instance.epicgames.Checked || Games.instance.fivem.Checked || Games.instance.faceit.Checked || Games.instance.rage.Checked || Games.instance.hoi4.Checked || Games.instance.victoria3.Checked || Games.instance.eu4.Checked || Games.instance.nvidia.Checked || Games.instance.farmingsimulator2022.Checked || Games.instance.Ubisoft.Checked || Games.instance.xbox.Checked || Games.instance.cod6.Checked || Games.instance.battlenet.Checked || Games.instance.codwarzone.Checked || Games.instance.offthegrid.Checked || Games.instance.marvelrivals.Checked || Games.instance.spotify.Checked || Games.instance.ageofempires4.Checked || Games.instance.companyofheroes2.Checked || Games.instance.companyofheroes3.Checked || Games.instance.darkdanddarker.Checked || Games.instance.destiny2.Checked || Games.instance.helldivers2.Checked || Games.instance.lostark.Checked || Games.instance.steeldivision2.Checked || Games.instance.lordoftheringsonline.Checked || Games.instance.throneandliberty.Checked || Games.instance.threekingdoms.Checked || Games.instance.warhammer3.Checked || Games.instance.vrchat.Checked || Games.instance.efootball.Checked || Games.instance.amongus.Checked || Games.instance.deadbydaylight2.Checked || Games.instance.deadlock.Checked || Games.instance.insurgencysandstorm.Checked || Games.instance.warthunder.Checked || Games.instance.paladins.Checked || Games.instance.readyornot.Checked || Games.instance.mythofempires.Checked || Games.instance.predecessor.Checked || Games.instance.unturned.Checked || Games.instance.rust.Checked || Games.instance.truckersmp.Checked || Games.instance.hellletloose.Checked || Games.instance.stateofdecay2.Checked || Games.instance.phasmophobia.Checked || Games.instance.fallguys.Checked)
            {
                if (!broute1.Checked && !broute2.Checked && !broute3.Checked && !broute4.Checked)
                {

                    eror.showdialog();
                    ERROR.instance.errortext.Text = "یکی از چهار روت پایینو انتخاب کن";

                }
                else
                {
                    if (guna2CircleButton4.Image == whitelogo)
                    {
                        guna2CircleButton4.Image = redlogo;

                        guna2TextBox1.Visible = true;
                        guna2TextBox1.Text = "Routing...";
                        guna2CircleButton4.BorderThickness = 0;
                        guna2CircleProgressBar1.Value = 50;
                        guna2CircleProgressBar2.Value = 50;

                        await Task.Delay(2000);

                        if (Games.instance.marvelrivals.Checked)
                        {
                            sh();
                            oh();
                            mtls();
                            tl();

                            string selectedGame = "Marvels"; // Replace with the selected game dynamically

                            chosedgame = selectedGame;
                        }


                        if (Games.instance.elderscrollsonline.Checked)
                        {
                            ESOsh();
                            ESOoh();
                            ESOtl();
                            ESOu();
                        }
                        if (Games.instance.conanexiles.Checked)
                        {
                            Conansh();
                            Conanoh();
                            Conantl();
                            Conanu();
                        }
                        if (Games.instance.scum.Checked)
                        {
                            Scumsh();
                            Scumoh();
                            Scumtl();
                            Scumu();
                        }
                        if (Games.instance.chivalry2.Checked)
                        {
                            chivsh();
                            chivoh();
                            chivtl();
                            chivu();
                        }
                        if (Games.instance.forhonor.Checked)
                        {
                            forhonorsh();
                            forhonoroh();
                            forhonortl();
                            forhonoru();
                        }
                        if (Games.instance.squad.Checked)
                        {
                            Squadsh();
                            Squadoh();
                            Squadtl();
                            Squadu();
                        }
                        if (Games.instance.rainbowsixsiege.Checked)
                        {
                            r6sh();
                            r6oh();
                            r6tl();
                            r6u();
                        }
                        if (Games.instance.counterstrike2.Checked)
                        {
                            cs2sh();
                            cs2oh();
                            cs2tl();
                            cs2u();
                        }
                        if (Games.instance.huntshowdown.Checked)
                        {
                            huntsh();
                            huntoh();
                            hunttl();
                            huntu();
                        }
                        if (Games.instance.discord.Checked)
                        {
                            discsh();
                            discoh();
                            disctl();
                            discu();
                        }
                        if (Games.instance.battlefield4.Checked)
                        {
                            bf4sh();
                            bf4oh();
                            bf4tl();
                            bf4u();
                        }
                        if (Games.instance.apex.Checked)
                        {
                            apexsh();
                            apexoh();
                            apextl();
                            apexu();
                        }
                        if (Games.instance.xdefiant.Checked)
                        {
                            xdefsh();
                            xdefoh();
                            xdeftl();
                            xdefu();
                        }
                        if (Games.instance.leagueoflegends.Checked)
                        {
                            LOLsh();
                            LOLoh();
                            LOLtl();
                            LOLu();
                        }
                        if (Games.instance.valorant.Checked)
                        {
                            valsh();
                            valoh();
                            valtl();
                            valu();
                        }
                        if (Games.instance.reddeadredemption.Checked)
                        {
                            rdr2sh();
                            rdr2oh();
                            rdr2tl();
                            rdr2u();
                        }
                        if (Games.instance.gtavgrandtheftautov.Checked)
                        {
                            gtavsh();
                            gtavoh();
                            gtavtl();
                            gtavu();
                        }
                        if (Games.instance.multiversus.Checked)
                        {
                            mvssh();
                            mvsoh();
                            mvstl();
                            mvsu();
                        }
                        if (Games.instance.seaofthieves.Checked)
                        {
                            arash();
                            araoh();
                            aratl();
                            arau();
                        }
                        if (Games.instance.epicgames.Checked)
                        {
                            epicsh();
                            epicoh();
                            epictl();
                            epicu();
                        }
                        if (Games.instance.pubgbattlegrounds.Checked)
                        {
                            pubgsh();
                            pubgoh();
                            pubgtl();
                            pubgu();
                        }
                        if (Games.instance.eaapp.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.dayz.Checked)
                        {
                            dayzsh();
                            dayzoh();
                            dayztl();
                            dayzu();
                        }
                        if (Games.instance.thefinals.Checked)
                        {
                            finalssh();
                            finalsoh();
                            finaltl();
                            finalsu();
                        }
                        if (Games.instance.battlefield3.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.fivem.Checked)
                        {
                            fivemsh();
                            fivemoh();
                            fivemtl();
                            fivemu();
                        }
                        if (Games.instance.rage.Checked)
                        {
                            ragesh();
                            rageoh();
                            ragetl();
                            rageu();
                        }
                        if (Games.instance.narakabladepoint.Checked)
                        {
                            narakash();
                            narakaoh();
                            narakatl();
                            narakau();
                        }
                        if (Games.instance.fortnite.Checked)
                        {
                            fortnitesh();
                            fortniteoh();
                            fortnitetl();
                            fortniteu();
                        }
                        if (Games.instance.battlefield1.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.battlefieldv.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.battlefield2042.Checked)
                        {
                            bf2042sh();
                            bf2042oh();
                            bf2042tl();
                            bf2042u();
                        }
                        if (Games.instance.fc24.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.fifa23.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.oncehuman.Checked)
                        {
                            oncehumansh();
                            oncehumanoh();
                            oncehumantl();
                            oncehumanu();
                        }
                        if (Games.instance.faceit.Checked)
                        {
                            faceitsh();
                            faceitoh();
                            faceittl();
                            faceitu();
                        }
                        if (Games.instance.starcitizen.Checked)
                        {
                            starsh();
                            staroh();
                            startl();
                            staru();
                        }
                        if (Games.instance.raidshadowlegends.Checked)
                        {
                            shadowraidsh();
                            shadowraidoh();
                            shadowraidtl();
                            shadowraidu();
                        }
                        if (Games.instance.newworld.Checked)
                        {
                            newworldsh();
                            newworldoh();
                            newworldtl();
                            newworldu();
                        }
                        if (Games.instance.arenabreakout.Checked)
                        {
                            arenabreakoutsh();
                            arenabreakoutoh();
                            arenabreakouttl();
                            arenabreakoutu();
                        }
                        if (Games.instance.deltaforce.Checked)
                        {
                            deltaforcesh();
                            deltaforceoh();
                            deltaforcetl();
                            deltaforceu();
                        }
                        if (Games.instance.forzahorizen5.Checked)
                        {
                            forza5sh();
                            forza5oh();
                            forza5tl();
                            forza5u();
                        }
                        if (Games.instance.warframe.Checked)
                        {
                            warframesh();
                            warframeoh();
                            warframetl();
                            warframeu();
                        }
                        if (Games.instance.knightsofhonor.Checked)
                        {
                            kohsh();
                            kohoh();
                            kohtl();
                            kohu();
                        }
                        if (Games.instance.spacemarine2.Checked)
                        {
                            spacesh();
                            spaceoh();
                            spacetl();
                            spaceu();
                        }
                        if (Games.instance.overwatch2.Checked)
                        {
                            overwatchsh();
                            overwatchoh();
                            overwatchtl();
                            overwatchu();
                        }
                        if (Games.instance.genshinimpact.Checked)
                        {
                            genshinsh();
                            genshinoh();
                            genshintl();
                            genshinu();
                        }
                        if (Games.instance.ageofmythology.Checked)
                        {
                            mythologysh();
                            mythologyoh();
                            mythologytl();
                            mythologyu();
                        }
                        if (Games.instance.rocketleague.Checked)
                        {
                            rocketsh();
                            rocketoh();
                            rockettl();
                            rocketu();
                        }
                        if (Games.instance.fc25.Checked)
                        {
                            eash();
                            eaoh();
                            eatl();
                            eau();
                        }
                        if (Games.instance.dota2.Checked)
                        {
                            dotash();
                            dotaoh();
                            dotatl();
                            dotau();
                        }
                        if (Games.instance.arahistoryuntold.Checked)
                        {
                            arash();
                            araoh();
                            aratl();
                            arau();
                        }
                        if (Games.instance.worldofwarcraft.Checked)
                        {
                            wowsh();
                            wowoh();
                            wowtl();
                            wowu();
                        }
                        if (Games.instance.crusaderkings3.Checked)
                        {
                            cksh();
                            ckoh();
                            cktl();
                            cku();
                        }
                        if (Games.instance.eu4.Checked)
                        {
                            cksh();
                            ckoh();
                            cktl();
                            cku();
                        }
                        if (Games.instance.victoria3.Checked)
                        {
                            cksh();
                            ckoh();
                            cktl();
                            cku();
                        }
                        if (Games.instance.hoi4.Checked)
                        {
                            cksh();
                            ckoh();
                            cktl();
                            cku();
                        }
                        if (Games.instance.nvidia.Checked)
                        {
                            nvidiash();
                            nvidiaoh();
                            nvidiatl();
                            nvidiau();
                        }
                        if (Games.instance.farmingsimulator2022.Checked)
                        {
                            fs22sh();
                            fs22oh();
                            fs22tl();
                            fs22u();
                        }
                        if (Games.instance.Ubisoft.Checked)
                        {
                            forhonorsh();
                            forhonoroh();
                            forhonortl();
                            forhonoru();
                        }
                        if (Games.instance.xbox.Checked)
                        {
                            xboxsh();
                            xboxoh();
                            xboxtl();
                            xboxu();
                        }
                        if (Games.instance.cod6.Checked)
                        {
                            cod6sh();
                            cod6oh();
                            cod6tl();
                            cod6u();
                        }
                        if (Games.instance.battlenet.Checked)
                        {
                            wowsh();
                            wowoh();
                            wowtl();
                            wowu();
                        }
                        if (Games.instance.codwarzone.Checked)
                        {
                            cod6sh();
                            cod6oh();
                            cod6tl();
                            cod6u();
                        }
                        if (Games.instance.offthegrid.Checked)
                        {
                            offthegridsh();
                            offthegridoh();
                            offthegridtl();
                            offthegridu();
                        }
                        /*
                        if (Games.instance.marvelrivals.Checked)
                        {
                            marvelsh();
                            marveloh();
                            marveltl();
                            marvelu();
                        }
                        */
                        if (Games.instance.spotify.Checked)
                        {
                            discsh();
                            discoh();
                            disctl();
                            discu();
                        }
                        if (Games.instance.ageofempires4.Checked)
                        {
                            arash();
                            araoh();
                            aratl();
                            arau();
                        }
                        if (Games.instance.companyofheroes2.Checked)
                        {
                            coh2sh();
                            coh2oh();
                            coh2tl();
                            coh2u();
                        }
                        if (Games.instance.companyofheroes3.Checked)
                        {
                            coh3sh();
                            coh3oh();
                            coh3tl();
                            coh3u();
                        }
                        if (Games.instance.darkdanddarker.Checked)
                        {
                            darkanddarkersh();
                            darkanddarkeroh();
                            darkanddarkertl();
                            darkanddarkeru();
                        }
                        if (Games.instance.destiny2.Checked)
                        {
                            destiny2sh();
                            destiny2oh();
                            destiny2tl();
                            destiny2u();
                        }
                        if (Games.instance.helldivers2.Checked)
                        {
                            helldivers2sh();
                            helldivers2oh();
                            helldivers2tl();
                            helldivers2u();
                        }
                        if (Games.instance.lostark.Checked)
                        {
                            lostarksh();
                            lostarkoh();
                            lostarktl();
                            lostarku();
                        }
                        if (Games.instance.steeldivision2.Checked)
                        {
                            steeldivision2sh();
                            steeldivision2oh();
                            steeldivision2tl();
                            steeldivision2u();
                        }
                        if (Games.instance.lordoftheringsonline.Checked)
                        {
                            lotronlinesh();
                            lotronlineoh();
                            lotronlinetl();
                            lotronlineu();
                        }
                        if (Games.instance.throneandliberty.Checked)
                        {
                            throneandlibertysh();
                            throneandlibertyoh();
                            throneandlibertytl();
                            throneandlibertyu();
                        }
                        if (Games.instance.threekingdoms.Checked)
                        {
                            threekingdomssh();
                            threekingdomsoh();
                            threekingdomstl();
                            threekingdomsu();
                        }
                        if (Games.instance.warhammer3.Checked)
                        {
                            warhammer3sh();
                            warhammer3oh();
                            warhammer3tl();
                            warhammer3u();
                        }
                        if (Games.instance.vrchat.Checked)
                        {
                            vrchatsh();
                            vrchatoh();
                            vrchattl();
                            vrchatu();
                        }
                        if (Games.instance.efootball.Checked)
                        {
                            efootballsh();
                            efootballoh();
                            efootballtl();
                            efootballu();
                        }
                        if (Games.instance.amongus.Checked)
                        {
                            amongussh();
                            amongusoh();
                            amongustl();
                            amongusu();
                        }
                        if (Games.instance.deadbydaylight2.Checked)
                        {
                            deadbydaylight2sh();
                            deadbydaylight2oh();
                            deadbydaylight2tl();
                            deadbydaylight2u();
                        }
                        if (Games.instance.deadlock.Checked)
                        {
                            deadlocksh();
                            deadlockoh();
                            deadlocktl();
                            deadlocku();
                        }
                        if (Games.instance.insurgencysandstorm.Checked)
                        {
                            insurgencysandstormsh();
                            insurgencysandstormoh();
                            insurgencysandstormtl();
                            insurgencysandstormu();
                        }
                        if (Games.instance.warthunder.Checked)
                        {
                            warthundersh();
                            warthunderoh();
                            warthundertl();
                            warthunderu();
                        }
                        if (Games.instance.paladins.Checked)
                        {
                            paladinssh();
                            paladinsoh();
                            paladinstl();
                            paladinsu();
                        }
                        if (Games.instance.readyornot.Checked)
                        {
                            readyornotsh();
                            readyornotoh();
                            readyornottl();
                            readyornotu();
                        }
                        if (Games.instance.mythofempires.Checked)
                        {
                            mythofempiressh();
                            mythofempiresoh();
                            mythofempirestl();
                            mythofempiresu();
                        }
                        if (Games.instance.predecessor.Checked)
                        {
                            predecessorsh();
                            predecessoroh();
                            predecessortl();
                            predecessoru();
                        }
                        if (Games.instance.unturned.Checked)
                        {
                            unturnedsh();
                            unturnedoh();
                            unturnedtl();
                            unturnedu();
                        }
                        if (Games.instance.rust.Checked)
                        {
                            rustsh();
                            rustoh();
                            rusttl();
                            rustu();
                        }
                        if (Games.instance.truckersmp.Checked)
                        {
                            truckersmpsh();
                            truckersmpoh();
                            truckersmptl();
                            truckersmpu();
                        }
                        if (Games.instance.hellletloose.Checked)
                        {
                            epicsh();
                            epicoh();
                            epictl();
                            epicu();
                        }
                        if (Games.instance.pathofexile2.Checked)
                        {
                            pathofexile2sh();
                            pathofexile2oh();
                            pathofexile2tl();
                            pathofexile2u();
                        }
                        if (Games.instance.stateofdecay2.Checked)
                        {
                            xboxsh();
                            xboxoh();
                            xboxtl();
                            xboxu();
                        }
                        if (Games.instance.phasmophobia.Checked)
                        {
                            phasmophobiash();
                            phasmophobiaoh();
                            phasmophobiatl();
                            phasmophobiau();
                        }
                        if (Games.instance.fallguys.Checked)
                        {
                            fallguyssh();
                            fallguysoh();
                            fallguystl();
                            fallguysu();
                        }
                    }
                    else if (guna2CircleButton4.Image == mainlogo || guna2CircleButton4.Image == redlogo)
                    {
                        Invoke(new MethodInvoker(delegate
                        {
                            count = false;
                            guna2CircleButton4.Image = orangelogo;
                            guna2TextBox1.Text = "Closing Routes...";

                            label11.Text = "0.0 KB";
                            label10.Text = "0.0 KB";

                            gameinfo.Visible = false;

                            KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                           // Closeroute();
                            Closeroute2();

                            guna2CircleButton4.Image = whitelogo;
                            guna2CircleButton4.BorderColor = Color.White;
                            guna2TextBox1.Visible = false;
                            guna2CircleProgressBar1.Value = 0;
                            guna2CircleProgressBar2.Value = 0;
                            guna2CircleButton4.BorderThickness = 2;
                        }));
                    }
                }
            }
            else
            {
                eror.showdialog();
                ERROR.instance.errortext.Text = "قبل اتصال بازی خودتو انتخاب کن از توی منوی سمت چپ";

            }
        }

        private void arrow2_Click(object sender, EventArgs e)
        {

        }

        private void broute1_Click(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute1.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = true;
                    arrow3.Visible = false;
                    arrow4.Visible = false;
                    arrow5.Visible = false;
                }
            }));
        }

        private void broute2_Click(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute2.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = false;
                    arrow3.Visible = true;
                    arrow4.Visible = false;
                    arrow5.Visible = false;
                }
            }));
        }

        private void broute3_Click(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute3.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = false;
                    arrow3.Visible = false;
                    arrow4.Visible = true;
                    arrow5.Visible = false;
                }
            }));
        }

        private void broute4_Click(object sender, EventArgs e)
        {
            Invoke(new MethodInvoker(delegate
            {
                if (broute4.Checked)
                {
                    arrow.Visible = false;
                    arrow2.Visible = false;
                    arrow3.Visible = false;
                    arrow4.Visible = false;
                    arrow5.Visible = true;
                }
            }));
        }

        private void mainpanel_Paint_1(object sender, PaintEventArgs e)
        {

        }

        private void guna2ProgressBar1_ValueChanged(object sender, EventArgs e)
        {

        }




        // Store fetched routes
        private List<string> fetchedRoutes = new List<string>();

        string chosedgame;
        private async void guna2Button11_Click(object sender, EventArgs e)
        {
            await Task.Run(async () =>
            {
                try
                {

                    if (Games.instance.discord.Checked)
                    {
                        string selectedGame = "Discord"; // Replace with the selected game dynamically
                        chosedgame = selectedGame;
                    }
                    if (Games.instance.ageofempires4.Checked)
                    {
                        string selectedGame = "Game2"; // Replace with the selected game dynamically
                        chosedgame = selectedGame;
                    }

                    List<RouteInfo> routes = await GetRoutesForGameFromServer(chosedgame);

                    if (routes == null || routes.Count == 0)
                    {
                        // Handle no routes or errors in fetching
                        MessageBox.Show("Unable to fetch routes for the selected game.");
                        return;
                    }

                    Process gostProcesss = new Process();
                    ProcessStartInfo gostStartInfo = new ProcessStartInfo();
                    gostStartInfo.FileName = @"RP.exe";
                    gostStartInfo.Arguments = @"-L ""socks5://:9998"" -F ""ss+ohttp://robo2.roboping.ir:80?crypt=sha256&mode=fast&log?level=ERROR""";
                    gostStartInfo.Verb = "runas";
                    gostProcesss.StartInfo = gostStartInfo;
                    gostProcesss.Start();

                    // Build the OpenVPN arguments dynamically
                    string openvpnArguments = $@"--config Roboping.config --remote oh.roboping.ir 9090 --socks-proxy 127.0.0.1 9998 --route {route1} 192.0.0.0 net_gateway --route {route2} 192.0.0.0 net_gateway --route {route3} 192.0.0.0 net_gateway --route {route4} 192.0.0.0 net_gateway --route {youtube} 255.255.0.0 net_gateway --route {youtube2} 255.255.0.0 net_gateway --route {youtube3} 255.0.0.0 net_gateway --route {discordroute1} 255.255.0.0 vpn_gateway --route {discordroute2} 255.255.255.255 vpn_gateway --route {discordroute3} 255.255.0.0 vpn_gateway --route {discordroute4} 255.255.255.255 vpn_gateway --route {discordroute5} 255.255.255.0 vpn_gateway --route {discordroute6} 255.255.0.0 vpn_gateway --route {discordroute7} 255.255.0.0 vpn_gateway --route {discordroute8} 255.255.255.0 vpn_gateway --route {route1} 192.0.0.0 net_gateway --route {spotify1} 255.255.0.0 vpn_gateway --route {spotify2} 255.255.0.0 vpn_gateway --route {spotify3} 255.0.0.0 vpn_gateway --route {spotify4} 255.0.0.0 vpn_gateway --route {whatisip} 255.255.0.0 net_gateway";

                    foreach (var route in routes)
                    {
                        openvpnArguments += $" --route {route.IP} {route.Subnet} {route.Gateway}";
                        // Store the route in the fetchedRoutes list for deletion later
                        fetchedRoutes.Add(route.IP);
                    }

                    // Start OpenVPN process with the new arguments
                    Process openvpnProcess = new Process();
                    ProcessStartInfo openvpnStartInfo = new ProcessStartInfo();
                    openvpnStartInfo.FileName = @"RPO.exe";
                    openvpnStartInfo.Arguments = openvpnArguments;
                    openvpnStartInfo.Verb = "runas";
                    openvpnStartInfo.UseShellExecute = false;
                    openvpnStartInfo.RedirectStandardOutput = true;
                    openvpnStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    openvpnProcess.StartInfo = openvpnStartInfo;

                    openvpnProcess.Start();
                    openvpnProcess.BeginOutputReadLine();

                    openvpnProcess.WaitForExit();
                }
                catch (Exception)
                {
                    KillProcessesWithNames("openvpn", "RP", "Openvpnserv2", "OpenVPN Service", "OpenVPN Daemon", "RPO", "RPT", "stunnel");

                    this.Invoke(new Action(async () =>
                    {
                        eror.showdialog();
                        ERROR.instance.errortext.Text = "یه مشکلی توی اینترنتت هست بررسیش کن و یا شایدم از سرور های منه پس به پشتیبانی بگو";
                    }));
                }
            });
        }

        private void guna2Button1_Click_1(object sender, EventArgs e)
        {

        }
        public class RouteInfo
        {
            public string IP { get; set; }
            public string Subnet { get; set; }
            public string Gateway { get; set; }
        }

        public class GameRoutes
        {
            public string GameName { get; set; }
            public List<RouteInfo> Routes { get; set; }
        }

        public class RouteList
        {
            public List<GameRoutes> Games { get; set; }
        }

        // Method to fetch routes from the server
        public async Task<List<RouteInfo>> GetRoutesForGameFromServer(string gameName)
        {
            using (HttpClient client = new HttpClient())
            {
                try
                {
                    string url = "http://roboping.ir/api/gameroutes.php";  // Replace with your API endpoint
                    string jsonResponse = await client.GetStringAsync(url);
                    RouteList routeList = JsonConvert.DeserializeObject<RouteList>(jsonResponse);

                    // Find the game by name
                    var game = routeList.Games.FirstOrDefault(g => g.GameName.Equals(gameName, StringComparison.OrdinalIgnoreCase));
                    return game?.Routes;  // Return the routes of the game, or null if not found
                }
                catch (Exception ex)
                {
                    // Handle exceptions
                    Console.WriteLine($"Error fetching routes: {ex.Message}");
                    return null;
                }
            }
        }
    }
}
